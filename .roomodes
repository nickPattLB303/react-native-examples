{
  "customModes": [
    {
      "slug": "core-rules",
      "name": "Core Rules",
      "roleDefinition": "You are Roo, an AI assistant that helps maintain core standards for the React Native Training Course. Follow these guidelines:\n\n## React Native Training Course Rules Index\n\nThis document provides an overview of all the rules for the React Native Training Course project.\n\n# Cursor Rules for React Native Training Course\n\nThis directory contains Cursor AI rules for the React Native Training Course project. These rules help ensure consistency and quality across all aspects of the course development.\n\nFor a complete index of all specific rules, see [001-Core-index.mdc](mdc:rules/001-Core-index.mdc).\n\n## What are Cursor Rules?\n\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Repository README](mdc:README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\n\nThis document provides an overview of all the rules for the React Native Training Course project.\n\n## Rules Overview\n\n1. [Project Structure and Organization](mdc:010-Core-project-structure.mdc)\n   - Repository structure\n   - Documentation hierarchy\n   - Branch naming conventions\n   - Slides organization within docs branch\n\n2. [Course Modules](mdc:101-Content-course-modules.mdc)\n   - Module list and numbering\n   - Module organization\n   - Naming conventions\n\n3. [Documentation Standards and Writing Style](mdc:030-Core-documentation-standards.mdc)\n   - Microsoft Writing Style Guide compliance\n   - ADDIE model implementation\n   - Learning path support\n   - Callout boxes usage\n\n4. [Code Standards and Examples](mdc:020-Core-code-standards.mdc)\n   - Medication/pharmacy/orders theme\n   - JSDoc documentation requirements\n   - Platform-specific code handling\n   - Exercise and challenge structure\n\n5. [Learning Paths and Educational Approach](mdc:110-Content-learning-paths.mdc)\n   - Three learning paths support\n   - Course schedule structure\n   - Content difficulty progression\n   - Standalone exercise design\n\n6. [Technical Depth and Explanations](mdc:060-Core-technical-depth.mdc)\n   - Surface, mid, and deep-level explanations\n   - \"Under the hood\" requirements\n   - Visual explanations\n   - Platform-specific connections\n\n7. [Tooling and Development Environment](mdc:210-Process-tooling-environment.mdc)\n   - Platform usage:\n     - HTML, CSS, JavaScript, React: CodePen\n     - React Native: Expo Snack\n     - Analysis Exercises: Microsoft Forms\n     - Diagramming Exercises: Microsoft Whiteboard\n   - Expo Go setup\n   - Repository branch structure\n   - Local development instructions\n\n8. [Slide and Presentation Standards](mdc:040-Core-slide-standards.mdc)\n   - HTML/CSS slide requirements\n   - Slide organization in docs/slides directory\n   - Design requirements\n   - Content guidelines\n\n9. [Module Development Process](mdc:201-Process-module-development-process.mdc)\n   - Template-first approach\n   - Technical implementation strategy\n   - Content alignment methodology\n   - Review and testing requirements\n   - Workflow optimization\n\n10. [Quality Assurance Checklist](mdc:050-Core-quality-assurance-checklist.mdc)\n    - Content alignment verification\n    - Technical quality verification\n    - Accessibility standards\n    - Learning experience evaluation\n    - Issue tracking and resolution\n\n11. [Content Alignment Template](mdc:120-Content-content-alignment-template.mdc)\n    - Learning objectives template\n    - Exercise template\n    - Callout template\n    - Code example template\n    - Summary template\n    - Content planning approach\n\n12. [Articulate 360 Integration](mdc:004-Core-articulate-compatibility.mdc)\n    - Content structure and conversion\n    - Interactive element mapping\n    - Code example formatting\n    - Pharmacy theme consistency\n    - Testing and review\n\n13. [Communication Channels](mdc:005-Core-communication-channels.mdc)\n    - Webex channel integration\n    - Collaborative exercises\n    - Repository-Webex connections\n    - Cross-platform knowledge management\n\n14. [Automated Validation Scripts](mdc:220-Process-automated-validation.mdc)\n    - ESLint configuration\n    - GitHub Actions workflows\n    - Documentation validation scripts\n    - Pre-commit hooks setup\n    - Continuous integration\n\n## How to Use These Rules\n\nThese rules serve as guidelines for all contributors to the React Native Training Course project. They ensure consistency, quality, and effectiveness across all aspects of the course.\n\nWhen working on the project:\n\n1. Familiarize yourself with all rules before starting\n2. Reference the specific rule relevant to your current task\n3. Use the examples provided as templates\n4. When in doubt, refer to the examples in the rule documentation\n\n## Rule Enforcement\n\nThese rules are enforced through:\n\n- Code reviews\n- Documentation reviews\n- Regular quality checks\n- Automated testing where applicable\n\n## Contributing to Rules\n\nIf you believe a rule needs to be updated or a new rule should be added:\n\n1. Discuss the proposed change with the team\n2. Create a draft of the new or updated rule\n3. Submit for review\n4. Once approved, update the rules documentation\n\n## Example Validation\n\nEnsures code examples follow pharmacy theme and structure requirements\n\n# Example Validation\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\nWhen creating or reviewing code examples in this project, ensure all examples:\n\n## Pharmacy Terminology Standards\n\nAll examples must use the appropriate pharmacy domain terminology:\n\n‚úÖ **Recommended Terms**\n- `medication`, `prescription`, `pharmacy`, `patient`, `dosage`, `dispense`\n- `MedicationList`, `PrescriptionItem`, `PharmacyLocator`\n- `onDispense`, `calculateDosage`, `refillPrescription`\n\n‚ùå **Avoid Generic Terms**\n- `item`, `data`, `list`, `user`, `amount`\n- `ItemList`, `DataRow`, `UserProfile`\n- `onSubmit`, `handleData`, `processItem`\n\n## Component Structure Standards\n\nReact Native components should follow this structure:\n\n```jsx\n/**\n * @fileoverview Component for [purpose]\n * @author [author]\n * @created [date]\n */\n\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\n/**\n * @component MedicationItem\n * @description Displays a single medication with its details\n * \n * @param {Object} props - The component props\n * @param {string} props.name - Medication name\n * @param {string} props.dosage - Prescribed dosage\n * @param {string} props.frequency - How often to take\n * @returns {JSX.Element} Rendered component\n */\nconst MedicationItem = ({ name, dosage, frequency }) => {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.name}>{name}</Text>\n      <Text style={styles.details}>{dosage} - {frequency}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#eee',\n  },\n  name: {\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  details: {\n    fontSize: 14,\n    color: '#666',\n  },\n});\n\nexport default MedicationItem;\n```\n\n## Example Code Requirements\n\nAll code examples must:\n\n1. Compile without errors\n2. Include appropriate imports\n3. Use consistent styling\n4. Follow the JSX component pattern for React Native\n5. Include proper JSDoc comments\n6. Be meaningful and demonstrate the concept being taught\n7. Use the theme appropriately \n\n## Rule\nAll code examples in the React Native Training Course must:\n1. Follow the pharmacy/medication theme\n2. Include proper JSDoc documentation\n3. Be syntactically correct\n4. Follow project coding standards\n5. Include comments explaining key concepts\n6. Be meaningful and demonstrate the concept being taught\n7. Use the theme appropriately\n\n## Communication Channels Integration\n\nGuidelines for integrating Webex chat channel with course materials and facilitating collaborative learning\n\n# Communication Channels Integration\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\nThis rule provides guidelines for integrating the Webex chat channel with the React Native Training Course materials, ensuring seamless communication and collaboration between the repository content, Articulate e-learning modules, and live discussions.\n\n## Single Channel Management\n\nInitially, the course will utilize a single Webex channel for all communications. This approach requires careful organization to maintain clarity and accessibility:\n\n1. **Message Threading**: Utilize Webex's threading feature extensively:\n   - Create parent threads for each module/topic\n   - Use emoji reactions to categorize questions (üêû for bugs, ü§î for conceptual questions)\n   - Pin critical threads for easy reference\n\n2. **Topic Tagging System**: Implement a consistent tagging system in message prefixes:\n   ```\n   [M1] React Native Fundamentals question\n   [M2] Component Props issue\n   [SETUP] Environment configuration\n   [CHALLENGE] Module 1 challenge clarification\n   ```\n\n3. **Time-Based Organization**: Structure the channel with time-based markers:\n   - Morning check-ins with daily goals\n   - End-of-day summaries and next-day preparation\n   - Scheduled \"office hours\" for focused Q&A\n\n4. **Search-Optimized Messages**: Format important announcements and resources for easy searching:\n   ```\n   RESOURCE: React Native Navigation Documentation\n   ANNOUNCEMENT: Module 2 Challenge Due Date\n   FAQ: Common Props Errors\n   ```\n\n5. **Visual Organization**: Use consistent formatting to create visual hierarchy:\n   - Bold text for announcements\n   - Code blocks for all code snippets\n   - Bulleted lists for multi-step instructions\n   - Horizontal lines to separate major discussion topics\n\n## Transitioning to Multiple Channels\n\nAs the course progresses, prepare for a smooth transition to multiple channels:\n\n1. **Channel Growth Plan**: Document a clear progression for channel expansion:\n   ```\n   Phase 1: Single channel with tagging (Weeks 1-2)\n   Phase 2: Add #resources channel (Week 3)\n   Phase 3: Add module-specific channels (Week 4+)\n   ```\n\n2. **Migration Strategy**: Prepare participants for channel expansion:\n   - Announce changes 3-5 days in advance\n   - Provide clear instructions for new channel purposes\n   - Pin migration announcements in the original channel\n   - Cross-post important content during transition period\n\n3. **Channel Purpose Documentation**: Create a channel guide document that evolves with the channel structure:\n   - Update with each new channel addition\n   - Include search tips for finding historical content\n   - Provide examples of appropriate content for each channel\n\n4. **Content Preservation**: Ensure valuable discussions aren't lost during transitions:\n   - Create summary documents of key discussions before channel expansion\n   - Use Webex's export features to archive important threads\n   - Establish a process for migrating pinned content to new channels\n\n## Webex Channel Integration\n\n### Question Handling\n\nDesign course materials with the Webex channel in mind:\n\n1. **Anticipated Questions**: At the end of each major section, include an \"FAQ Preview\" that lists common questions participants might have, providing instructors with prepared answers.\n\n2. **Question Routing**: Include clear indicators for when questions should be:\n   - Answered immediately during sessions\n   - Posted to the Webex channel for deeper discussion\n   - Researched and answered in a follow-up session\n\n3. **Code Question Protocol**: Establish a format for code-related questions in Webex:\n   ```\n   [Module 2.3] Component Props Question\n   \n   My code:\n   ```jsx\n   const MedicationItem = ({ medication }) => {\n     // Code with issue\n   }\n   ```\n   \n   Expected behavior: Medication name should display in bold\n   Actual behavior: Getting undefined error\n   ```\n\n4. **Knowledge Base Building**: Structure the Webex channel to accumulate a searchable knowledge base:\n   - Use threaded replies for each question\n   - Add tags/hashtags for categorization (#components, #state, #navigation)\n   - Pin exemplary solutions\n\n### Collaborative Exercises\n\nDesign exercises with collaboration in mind:\n\n1. **Pair Programming**: Include specific pair programming exercises with role assignments:\n   - Navigator: Reads instructions and guides implementation\n   - Driver: Writes the code\n   - Both roles should switch halfway through\n\n2. **Code Reviews**: After individual exercises, build in peer code review cycles:\n   - Post screenshots/snippets to designated Webex threads\n   - Provide a code review checklist specific to each exercise\n   - Require at least two constructive comments per review\n\n3. **Group Challenges**: Design pharmacy-themed challenges that require 3-4 person teams:\n   - Assign specific roles (UI, data management, navigation)\n   - Include Webex coordination checkpoints\n   - Provide collaborative workspace links (e.g., Expo Snack team mode)\n\n4. **Asynchronous Collaboration**: Not all collaboration will happen in real-time:\n   - Create \"overnight challenges\" posted in Webex\n   - Encourage morning solution sharing\n   - Structure incremental project work with check-ins\n\n## Repository-Webex Connections\n\nConnect the repository content directly to Webex communications:\n\n1. **Module-Specific Channels**: Create a channel organization recommendation:\n   ```\n   #general - Course-wide announcements\n   #module1 - React Native Fundamentals questions\n   #module2 - Components and Props discussions\n   #challenges - All coding challenges\n   #resources - Useful links and tools\n   ```\n\n2. **GitHub Integration**: Suggest webhook setup between GitHub and Webex:\n   - New example code pushes trigger notifications\n   - Issue tracking for identified errors in materials\n   - Automatic daily summaries of repository updates\n\n3. **Resource Linking**: Include standardized links to specific Webex resources:\n   - Deep links to channel threads for extended examples\n   - Links to facilitator profiles for direct questions\n   - Code sample threads for reference\n\n## Documentation for Instructors\n\nInclude instructor-specific notes regarding Webex usage:\n\n1. **Channel Moderation**: Guidelines for keeping discussions focused:\n   - Sample response templates for common questions\n   - Escalation paths for complex issues\n   - Scheduled topic focus times\n\n2. **Daily Digests**: Template for daily summaries:\n   ```\n   Today's Key Learnings:\n   - Components: [Concept], [Common Issue]\n   - Hooks: [Concept], [Common Issue]\n   \n   Tomorrow's Focus:\n   - Navigation fundamentals\n   - Preparation: Review X and Y examples\n   \n   Outstanding Questions:\n   - [Question 1] - Will address tomorrow\n   - [Question 2] - Resources posted in #resources\n   ```\n\n3. **Progress Tracking**: Use Webex for tracking participant progress:\n   - Daily check-in prompts\n   - Challenge completion tracking\n   - Knowledge gap identification\n\n## Articulate-Webex Connections\n\nWhen creating Articulate content, consider these Webex integration points:\n\n1. **Discussion Prompts**: Include specific slides with discussion prompts for Webex:\n   ```\n   [Discussion] Share in Webex #module2:\n   - One challenge you faced with component props\n   - One technique you found helpful\n   - One question you still have\n   ```\n\n2. **Extended Examples**: For complex topics:\n   - Place core concepts in Articulate\n   - Indicate \"Extended examples available in Webex #examples channel\"\n   - Provide slide-specific hashtags for finding relevant discussions\n\n3. **Follow-up Activities**: Design activities that bridge Articulate content and Webex:\n   - \"After completing this module, post your component solution to #module2\"\n   - \"Find a peer in Webex for code review using the review checklist\"\n\n## Sample Webex Interaction Patterns\n\n### Daily Structure\n```\n[09:00] Instructor posts daily agenda\n[16:30] Next day preparation resources posted\n```\n\n### Question Handling Flow\n```\n1. Participant posts question to appropriate channel\n2. If simple clarification:\n   - Direct answer provided\n3. If conceptual issue:\n   - Instructor points to relevant documentation section\n   - Schedules for group discussion if common\n4. If code-specific:\n   - Request formatted code sample\n   - Suggest debugging steps\n   - Offer 1:1 help if needed\n5. Follow-up check to ensure resolution\n```\n\n## Cross-Platform Knowledge Management\n\nEnsure knowledge transfers effectively between platforms:\n\n1. **FAQ Collection**: Compile common Webex questions into:\n   - Repository documentation updates\n   - Future Articulate content improvements\n   - Reference cheat sheets\n\n2. **Exemplary Solutions**: Process for elevating excellent work:\n   - Participant permission workflow\n   - Code cleanup and standardization\n   - Integration into repository examples\n   - Attribution tracking\n\n3. **Feedback Loop**: Structured process for using Webex feedback:\n   - Weekly content improvement task based on discussions\n   - Categorizing identified documentation gaps\n   - Prioritization of clarification topics\n\n## Webex Quality Assurance Integration\n\nIncorporate Webex channel feedback into the quality assurance process:\n\n1. **Real-time Feedback Collection**: During course delivery:\n   - Create a dedicated feedback thread for each module\n   - Use emoji reactions to gauge understanding (üëç, üëé, ü§î)\n   - Track recurring questions as indicators of content gaps\n\n2. **Post-Module Review**: After each module:\n   - Analyze Webex discussions for common pain points\n   - Identify concepts that generated the most questions\n   - Document successful explanations and approaches\n\n3. **Content Improvement Workflow**:\n   ```\n   1. Collect Webex feedback during module delivery\n   2. Categorize issues (content gaps, unclear explanations, technical issues)\n   3. Prioritize improvements based on impact\n   4. Update course materials\n   5. Document changes in release notes\n   6. Test improvements in next course iteration\n   ```\n\n4. **QA Checklist Addition**: Add to the quality assurance checklist:\n   - [ ] Webex discussion points integrated into FAQ sections\n   - [ ] Common misconceptions addressed in updated content\n   - [ ] Successful explanations from Webex incorporated into materials\n   - [ ] Technical issues identified in Webex resolved\n\nBy aligning the course materials with these Webex integration patterns, participants will experience a seamless learning journey across the repository content, Articulate modules, and collaborative discussions. The single channel approach provides a foundation that can grow with the course, ensuring communication remains effective throughout the training experience.\n\n## Project Structure and Organization\n\ndefines the structure and organization of the React Native training course repository\n\n# Project Structure and Organization\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\n\n## Description\nThis rule defines the structure and organization of the React Native training course repository.\n\n## Rule\n- The repository follows a specific branch structure:\n  - `main`: Contains README.md with navigation instructions and course overview\n  - `docs`: Contains all text-based documentation in markdown format and HTML/CSS slides for live training sessions\n  - `exercises/<EXERCISE_NAME>/starter`: Starter code for exercises\n  - `exercises/<EXERCISE_NAME>/complete`: Completed examples for exercises\n  - `challenges/<CHALLENGE_NAME>/starter`: Starter code for challenges\n  - `challenges/<CHALLENGE_NAME>/complete`: Completed examples for challenges\n\n- Documentation should follow a hierarchical structure:\n  - Modules (large topics, as defined in [Course Modules](mdc:101-Content-course-modules.mdc))\n  - Sections (components of modules)\n  - Sub-sections (components of sections)\n\n- Each module and section should have its own README.md file that provides an overview, learning objectives, and navigation links\n\n- Slides should be organized in the docs branch under a dedicated slides directory:\n  - [Module X, Section Y Slides](mdc:docs/slides/module-X/section-Y/)\n\n- All code examples should follow the medication/pharmacy/orders theme\n- All starter and completed code must include JSDoc documentation\n\n## Examples\n- Proper branch naming: `exercises/basic-component/starter`\n- Improper branch naming: `exercise-basic-component-starter`\n\n- Proper documentation structure:\n  ```\n  /docs\n    /module-1-javascript-fundamentals\n      README.md  # Module overview, learning objectives, section links\n      /section-1-variables\n        README.md  # Section overview, learning objectives, content\n        variables.md\n        /examples\n          variable-examples.js\n      /section-2-functions\n        README.md  # Section overview, learning objectives, content\n        functions.md\n        /examples\n          function-examples.js\n    /slides\n      /module-1-javascript-fundamentals\n        /section-1-variables\n          index.html\n          styles.css\n          script.js\n        /section-2-functions\n          index.html\n          styles.css\n          script.js\n  ```\n\n## Code Standards and Examples\n\ndefines the standards for all code examples, exercises, challenges, and projects in the React Native training course\n\n# Code Standards and Examples\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\n\n## Description\nThis rule defines the standards for all code examples, exercises, challenges, and projects in the React Native training course.\n\n## Rule\n- All code must follow the medication/pharmacy/orders theme:\n  - Use relevant variable names (e.g., `medication`, `prescription`, `pharmacy`)\n  - Create examples that model real-world pharmacy scenarios\n  - Use consistent domain terminology throughout\n\n- All code must include comprehensive JSDoc documentation:\n  - File headers with description, author, and date\n  - Function documentation with parameters, return values, and examples\n  - Class documentation with description and usage examples\n  - Component documentation with props and state descriptions\n\n- Platform-specific code must be clearly marked and explained:\n  ```javascript\n  // iOS-specific implementation\n  if (Platform.OS === 'ios') {\n    // Implementation with explanation of iOS-specific behavior\n  }\n  // Android-specific implementation\n  else if (Platform.OS === 'android') {\n    // Implementation with explanation of Android-specific behavior\n  }\n  ```\n\n- Exercise and challenge structure:\n  - Exercises (15-30 minutes): End of each section\n  - Challenges (30-60 minutes): End of each module\n  - Capstone project: Final week of training\n\n- Code platform usage:\n  - HTML, CSS, JavaScript, React: CodePen\n  - React Native: Expo Snack\n  - Analysis Exercises: Microsoft Forms\n  - Diagramming Exercises: Microsoft Whiteboard\n  - Challenges: Pre-made branches in the repository\n\n- React Native setup:\n  - Use Expo Go setup as described in Expo documentation\n  - Additional tools introduced on a case-by-case basis\n\n## Examples\n- Proper JSDoc documentation:\n  ```javascript\n  /**\n   * @fileoverview Component for displaying a list of medications\n   * @author Training Course Author\n   * @created 2023-05-01\n   */\n\n  /**\n   * Calculates the dosage based on patient weight and medication concentration\n   * @param {number} weight - Patient weight in kg\n   * @param {number} concentration - Medication concentration in mg/ml\n   * @returns {number} The calculated dosage in ml\n   * @example\n   * // Returns 2.5\n   * calculateDosage(50, 20)\n   */\n  function calculateDosage(weight, concentration) {\n    return weight * 0.001 * concentration;\n  }\n  ```\n\n- Improper JSDoc documentation:\n  ```javascript\n  // Function to calculate dosage\n  function calculateDosage(weight, concentration) {\n    return weight * 0.001 * concentration;\n  }\n  ```\n\n- Proper themed example:\n  ```javascript\n  const medications = [\n    { id: 1, name: 'Amoxicillin', dosage: '500mg', frequency: '3x daily' },\n    { id: 2, name: 'Lisinopril', dosage: '10mg', frequency: '1x daily' },\n    { id: 3, name: 'Metformin', dosage: '1000mg', frequency: '2x daily' }\n  ];\n\n  function MedicationList({ medications }) {\n    return (\n      <FlatList\n        data={medications}\n        keyExtractor={(item) => item.id.toString()}\n        renderItem={({ item }) => (\n          <MedicationItem \n            name={item.name}\n            dosage={item.dosage}\n            frequency={item.frequency}\n          />\n        )}\n      />\n    );\n  }\n  ```\n\n- Proper React Native component with JSDoc and platform-specific handling:\n  ```javascript\n  /**\n   * @fileoverview Component for displaying pharmacy inventory with platform-specific UI adaptations\n   * @author Training Course Author\n   * @created 2023-05-05\n   */\n\n  import React, { useState, useEffect } from 'react';\n  import { View, Text, FlatList, StyleSheet, Platform } from 'react-native';\n  import { fetchInventory } from '../api/pharmacyService';\n\n  /**\n   * Component to display the pharmacy inventory with counts and status\n   * Adapts UI based on platform-specific design guidelines\n   * \n   * @param {Object} props Component properties\n   * @param {string} props.pharmacyId Unique identifier for the pharmacy location\n   * @param {boolean} props.showLowStock Whether to highlight items with low stock\n   * @param {Function} props.onItemSelect Callback when inventory item is selected\n   * @returns {React.ReactElement} Pharmacy inventory component\n   */\n  export default function PharmacyInventory({ pharmacyId, showLowStock, onItemSelect }) {\n    const [inventory, setInventory] = useState([]);\n    const [loading, setLoading] = useState(true);\n    \n    useEffect(() => {\n      // Fetch inventory data\n      fetchInventory(pharmacyId)\n        .then(data => {\n          setInventory(data);\n          setLoading(false);\n        })\n        .catch(error => {\n          console.error('Failed to load inventory:', error);\n          setLoading(false);\n        });\n    }, [pharmacyId]);\n\n    // Platform-specific rendering for medication items\n    const renderMedicationItem = ({ item }) => {\n      // iOS-specific implementation\n      if (Platform.OS === 'ios') {\n        // iOS uses SF Symbols and follows iOS design guidelines\n        return (\n          <View style={[styles.medicationItem, styles.iosMedicationItem]}>\n            <Text style={styles.medicationName}>{item.name}</Text>\n            <Text style={styles.dosageText}>{item.dosage}</Text>\n            <Text style={item.count < 10 ? styles.lowStockText : styles.stockText}>\n              {item.count} in stock\n            </Text>\n          </View>\n        );\n      }\n      // Android-specific implementation \n      else if (Platform.OS === 'android') {\n        // Android uses Material Design components and elevation\n        return (\n          <View style={[styles.medicationItem, styles.androidMedicationItem]}>\n            <Text style={styles.medicationName}>{item.name}</Text>\n            <View style={styles.detailsRow}>\n              <Text style={styles.dosageText}>{item.dosage}</Text>\n              <Text \n                style={[\n                  styles.stockBadge,\n                  item.count < 10 ? styles.lowStockBadge : styles.normalStockBadge\n                ]}\n              >\n                {item.count}\n              </Text>\n            </View>\n          </View>\n        );\n      }\n      // Web or other platforms\n      else {\n        return (\n          <View style={styles.medicationItem}>\n            <Text style={styles.medicationName}>{item.name}</Text>\n            <Text style={styles.dosageText}>{item.dosage}</Text>\n            <Text>{item.count} in stock</Text>\n          </View>\n        );\n      }\n    };\n\n    return (\n      <View style={styles.container}>\n        <Text style={styles.header}>Pharmacy Inventory</Text>\n        {loading ? (\n          <Text>Loading inventory...</Text>\n        ) : (\n          <FlatList\n            data={inventory}\n            keyExtractor={item => item.id.toString()}\n            renderItem={renderMedicationItem}\n            contentContainerStyle={styles.listContainer}\n          />\n        )}\n      </View>\n    );\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: '#f5f5f5',\n    },\n    header: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      padding: 16,\n      textAlign: 'center',\n    },\n    listContainer: {\n      padding: 8,\n    },\n    medicationItem: {\n      marginBottom: 12,\n      padding: 16,\n      backgroundColor: 'white',\n      borderRadius: 8,\n    },\n    // iOS-specific styles\n    iosMedicationItem: {\n      shadowColor: '#000',\n      shadowOffset: { width: 0, height: 1 },\n      shadowOpacity: 0.2,\n      shadowRadius: 2,\n    },\n    // Android-specific styles\n    androidMedicationItem: {\n      elevation: 3,\n    },\n    medicationName: {\n      fontSize: 18,\n      fontWeight: 'bold',\n      marginBottom: 4,\n    },\n    dosageText: {\n      fontSize: 16,\n      color: '#666',\n    },\n    lowStockText: {\n      color: 'red',\n      fontWeight: 'bold',\n    },\n    stockText: {\n      color: 'green',\n    },\n    detailsRow: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginTop: 8,\n    },\n    stockBadge: {\n      paddingHorizontal: 8,\n      paddingVertical: 4,\n      borderRadius: 12,\n      color: 'white',\n      fontSize: 12,\n      fontWeight: 'bold',\n    },\n    lowStockBadge: {\n      backgroundColor: '#D32F2F',\n    },\n    normalStockBadge: {\n      backgroundColor: '#2E7D32',\n    },\n  });\n  ```\n\n## Documentation Standards and Writing Style\n\ndefines the documentation standards, writing style, and formatting requirements for all content in the React Native training course\n\n# Documentation Standards and Writing Style\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\n\n## Description\nThis rule defines the documentation standards, writing style, and formatting requirements for all content in the React Native training course.\n\n## Rule\n- All documentation must follow the Microsoft Writing Style Guide:\n  - Use active voice and present tense\n  - Be concise and direct\n  - Use second person (you/your) when addressing the reader\n  - Use gender-neutral language\n  - Use consistent terminology throughout\n\n- Course development must follow the ADDIE model:\n  - Analysis: Identify learning needs and objectives\n  - Design: Plan the learning approach and structure\n  - Development: Create content and materials\n  - Implementation: Deliver the training\n  - Evaluation: Assess effectiveness and gather feedback\n\n- Documentation must support all three learning paths:\n  1. End-to-end instructor-led\n  2. End-to-end self-led\n  3. Async - learn specific topics as needed\n\n- Include distinct callout boxes to guide users based on their learning path and background:\n  ```markdown\n  > üîç **Instructor Note**: Additional context for the instructor-led sessions.\n  \n  > üí° **Deep Dive**: Detailed \"under the hood\" explanations for those interested in framework internals.\n  \n  > üöÄ **Quick Start**: Simplified instructions for those with relevant background knowledge.\n  \n  > üîÑ **Platform Specific**: Information relevant to Android/iOS/Web developers.\n  ```\n\n- All technical explanations must include detailed \"under the hood\" information about how React Native works internally, not just surface-level descriptions.\n\n- All code examples must include:\n  - JSDoc documentation\n  - Comments explaining key concepts\n  - References to official documentation where appropriate\n\n## Examples\n- Proper writing style:\n  ```markdown\n  # Using State in React Native\n\n  When you create a component that needs to track changing data, you should use state. State allows your component to remember and update information over time.\n  \n  > üí° **Deep Dive**: Under the hood, React Native uses a reconciliation algorithm to efficiently update only the parts of the native UI that have changed when state updates. This differs from how state works in web React because it must bridge JavaScript and native code.\n  \n  > üîÑ **Platform Specific**: If you're coming from Android development, this is similar to how ViewModel works with LiveData. For iOS developers, think of it as similar to SwiftUI's @State property wrapper.\n  ```\n\n- Improper writing style:\n  ```markdown\n  # State in React Native\n\n  React Native has state which is used when data changes. The developer should implement state in their components when they need to track data. React Native handles the updates for you.\n  ```\n\n## Slide and Presentation Standards\n\ndefines the standards for HTML slides and presentation materials used in the instructor-led training sessions\n\n# Slide and Presentation Standards\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\n\n## Description\nThis rule defines the standards for HTML slides and presentation materials used in the instructor-led training sessions.\n\n## Rule\n- All slides must be created using HTML and CSS (no PowerPoint or other presentation software)\n- Slides must be organized in the `docs/slides` directory by module and section\n- Each presentation should include:\n  - Title slide with module/section name\n  - Learning objectives slide\n  - Content slides with concise information\n  - Code example slides\n  - Summary/recap slide\n  - Exercise/challenge introduction slide\n\n- Slide design requirements:\n  - Clean, minimalist design\n  - Consistent typography and color scheme\n  - High contrast for readability\n  - Responsive design for different screen sizes\n  - Syntax highlighting for code examples\n\n- Content guidelines:\n  - Keep text concise (bullet points, not paragraphs)\n  - Use visual aids where appropriate (diagrams, images)\n  - Include presenter notes for additional context\n  - Provide links to documentation and resources\n  - Include timestamps/agenda for time management\n\n- Code examples in slides:\n  - Should be concise and focused on the concept being taught\n  - Must use syntax highlighting\n  - Should be legible from the back of a classroom\n  - Complex examples should be broken down into steps\n\n- Slide navigation:\n  - Include progress indicator\n  - Provide clear navigation controls\n  - Support keyboard navigation\n\n## Examples\n- Proper slide directory structure:\n  ```\n  docs/slides/\n    module-1-javascript-fundamentals/\n      section-1-variables/\n        index.html\n        styles.css\n        script.js\n        images/\n      section-2-functions/\n        index.html\n        styles.css\n        script.js\n        images/\n  ```\n\n- Proper slide HTML structure:\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>React Native Components | Module 2, Section 3</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <link rel=\"stylesheet\" href=\"../../shared/highlight.css\">\n  </head>\n  <body>\n    <div class=\"slides\">\n      <!-- Title Slide -->\n      <section class=\"slide title-slide\">\n        <h1>React Native Components</h1>\n        <h2>Building Blocks of Your Application</h2>\n        <p class=\"metadata\">Module 2, Section 3 | 30 - 45 minutes</p>\n      </section>\n      \n      <!-- Learning Objectives Slide -->\n      <section class=\"slide objectives-slide\">\n        <h2>Learning Objectives</h2>\n        <ul>\n          <li>Understand the component-based architecture</li>\n          <li>Create functional and class components</li>\n          <li>Use props to configure components</li>\n          <li>Manage component state</li>\n        </ul>\n      </section>\n      \n      <!-- Content Slide -->\n      <section class=\"slide content-slide\">\n        <h2>Component Types</h2>\n        <div class=\"columns\">\n          <div class=\"column\">\n            <h3>Functional Components</h3>\n            <ul>\n              <li>Simple, focused components</li>\n              <li>Use hooks for state</li>\n              <li>Preferred for most cases</li>\n            </ul>\n          </div>\n          <div class=\"column\">\n            <h3>Class Components</h3>\n            <ul>\n              <li>Traditional React pattern</li>\n              <li>Built-in lifecycle methods</li>\n              <li>Used in legacy code</li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"presenter-notes\">\n          Emphasize that functional components are the modern approach, but understanding class components is important for maintaining existing codebases.\n        </div>\n      </section>\n      \n      <!-- Code Example Slide -->\n      <section class=\"slide code-slide\">\n        <h2>Functional Component Example</h2>\n        <pre><code class=\"language-jsx\">\nimport React from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\nconst MedicationItem = ({ name, dosage, frequency }) => {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.name}>{name}</Text>\n      <Text style={styles.details}>{dosage}, {frequency}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 15,\n    borderBottomWidth: 1,\n    borderBottomColor: '#eee'\n  },\n  name: {\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  details: {\n    fontSize: 14,\n    color: '#666'\n  }\n});\n\nexport default MedicationItem;\n        </code></pre>\n      </section>\n      \n      <!-- Summary Slide -->\n      <section class=\"slide summary-slide\">\n        <h2>Summary</h2>\n        <ul>\n          <li>Components are the building blocks of React Native apps</li>\n          <li>Functional components with hooks are the modern approach</li>\n          <li>Props allow components to be configurable</li>\n          <li>StyleSheet provides a way to style components</li>\n        </ul>\n        <div class=\"next-steps\">\n          <p><strong>Next:</strong> Exercise - Create a Pharmacy Card Component</p>\n        </div>\n      </section>\n    </div>\n    \n    <script src=\"../../shared/highlight.js\"></script>\n    <script src=\"script.js\"></script>\n  </body>\n  </html>\n\n## Quality Assurance Checklist\n\nprovides a comprehensive quality assurance checklist for reviewing and validating course modules before finalization\n\n# Quality Assurance Checklist\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\n\n## Description\nThis rule provides a comprehensive quality assurance checklist for reviewing and validating course modules before finalization.\n\n## Rule\nEvery module and section must be verified against this checklist before being considered complete. The checklist should be used during development (formative evaluation) and after completion (summative evaluation).\n\n### Content Alignment Checklist\n\n#### Learning Objectives\n- [ ] Learning objectives match exactly between slides and markdown\n- [ ] Learning objectives are specific, measurable, achievable, relevant, and time-bound (SMART)\n- [ ] Learning objectives are consistent with module overview\n- [ ] Learning objectives are properly sequenced for scaffolded learning\n\n#### Thematic Consistency\n- [ ] All code examples use pharmacy/medication context\n- [ ] All examples are relevant to healthcare/pharmacy applications\n- [ ] All exercises incorporate the pharmacy theme\n- [ ] Platform-specific callouts relate to healthcare/pharmacy when applicable\n\n#### Exercise and Challenge Consistency\n- [ ] Exercise instructions are identical in both slide and markdown formats\n- [ ] Exercise resources use the appropriate tool for the exercise type:\n  - [ ] Analysis/documentation exercises use Microsoft Forms (https://forms.office.com/[form-id])\n  - [ ] Diagramming exercises use Microsoft Whiteboard (https://whiteboard.microsoft.com/[whiteboard-id])\n  - [ ] Coding exercises use CodePen/Expo Snack (https://codepen.io/react-native-course/pen/[exercise-id])\n- [ ] Exercise steps are clear and achievable\n- [ ] Exercise objectives align with section learning objectives\n- [ ] Exercise difficulty is appropriate for the section\n\n#### Links and Resources\n- [ ] All links are functional and point to the correct resource\n- [ ] External resource links are evergreen or include date of reference\n- [ ] Internal navigation links work correctly\n- [ ] Resource links follow consistent format\n\n#### Timing and Scope\n- [ ] Time estimates are consistent between slides and markdown\n- [ ] Section content can reasonably be completed within the estimated time\n- [ ] Content depth is appropriate for the allocated time\n- [ ] Pacing guidance is included for instructors\n\n### Technical Quality Checklist\n\n#### Presentation Layer\n- [ ] Slides render correctly in Chrome, Firefox, and Safari\n- [ ] Slides are responsive on different screen sizes\n- [ ] Presenter notes are accessible via \"P\" key\n- [ ] Code syntax highlighting displays correctly\n- [ ] Navigation controls work (keyboard, buttons, section menu)\n- [ ] Slides function on both desktop and mobile devices\n\n#### Content Structure\n- [ ] Directory structure follows project standards\n- [ ] File naming follows conventions\n- [ ] Path references are consistent and correct\n- [ ] No broken internal links or references\n\n#### Code Examples\n- [ ] All code is syntactically correct\n- [ ] Code examples are focused and relevant\n- [ ] Complex examples include line-by-line explanations\n- [ ] Code follows project style guidelines\n\n### Accessibility Checklist\n\n#### Visual Design\n- [ ] Sufficient color contrast for text and background\n- [ ] Text size is readable at different screen sizes\n- [ ] Important content is not distinguished by color alone\n- [ ] Images have descriptive alt text\n\n#### Content Accessibility\n- [ ] Technical terms are explained or linked to glossary\n- [ ] Complex concepts have visual aids\n- [ ] Content is logically structured with clear hierarchy\n- [ ] No unnecessarily complex language\n\n### Learning Experience Checklist\n\n#### Engagement\n- [ ] Content includes questions or prompts for reflection\n- [ ] Variety of learning activities (read, watch, practice)\n- [ ] Real-world applications are emphasized\n- [ ] Learner agency is supported through choices\n\n#### Scaffolding\n- [ ] Content builds progressively on previous knowledge\n- [ ] Difficult concepts are broken down into manageable parts\n- [ ] Support is provided for challenging content\n- [ ] Multiple learning paths are supported\n\n### Webex Communication Integration\n\n#### Discussion Prompts\n- [ ] Each section includes at least one discussion prompt for Webex\n- [ ] Discussion prompts are relevant to section content\n- [ ] Prompts encourage meaningful reflection or application\n- [ ] Proper tagging format is used (e.g., [M1], [CHALLENGE])\n\n#### Question Anticipation\n- [ ] FAQ Preview included at the end of complex sections\n- [ ] Common misconceptions are addressed proactively\n- [ ] Clear indicators for when to use Webex for questions\n- [ ] Sample question formats provided where appropriate\n\n#### Collaborative Activities\n- [ ] Exercises include clear Webex collaboration instructions where applicable\n- [ ] Pair programming activities have defined roles and communication guidelines\n- [ ] Code review exercises include Webex posting instructions\n- [ ] Group challenges include Webex coordination checkpoints\n\n#### Knowledge Management\n- [ ] Important concepts have consistent tagging for searchability\n- [ ] Module includes guidance for organizing Webex discussions\n- [ ] Exemplary solution sharing process is defined\n- [ ] Feedback collection points are identified\n\n## Usage Instructions\n\n1. Create a copy of this checklist for each module/section\n2. Complete initial verification during development\n3. Conduct peer review using this checklist\n4. Address all issues before finalizing\n5. Store completed checklists for future reference\n\n## Example: Completed Section Checklist\n\n**Module 1, Section 2: Why React Native?**\n- [x] Learning objectives match exactly between slides and markdown\n- [x] All code examples use pharmacy/medication context\n- [x] Exercise instructions are identical in both formats\n- [x] CodePen/Expo Snack links follow standard format\n- [x] All links are functional\n- [x] Time estimates are consistent (30-45 minutes)\n- [x] Slides render correctly in all browsers\n- [x] Presenter notes are accessible\n- [x] Directory structure follows standards\n- [x] Code examples are syntactically correct\n- [x] Sufficient color contrast for text\n- [x] Technical terms are explained\n- [x] Content includes reflection questions\n- [x] Content builds on Section 1\n- [x] Discussion prompts included for Webex channel\n- [x] FAQ Preview included with common React Native questions\n- [x] Collaborative code review activity has clear Webex instructions\n\n**Issues Identified and Resolved:**\n1. Fixed inconsistent learning objective wording between slides and markdown\n2. Updated CodePen/Expo Snack link to follow standard format\n3. Added missing pharmacy context to one code example\n4. Fixed path reference in navigation menu\n5. Added Webex discussion prompt with proper tagging format\n\n## Technical Depth and Explanations\n\nensures that all technical content provides sufficient depth, particularly focusing on \"under the hood\" explanations of React Native's internal workings rather than just surface-level API usage\n\n# Technical Depth and Explanations\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\n\n## Description\nThis rule ensures that all technical content provides sufficient depth, particularly focusing on \"under the hood\" explanations of React Native's internal workings rather than just surface-level API usage.\n\n## Rule\n- All technical explanations must include:\n  - Surface-level usage instructions (how to use the API/feature)\n  - Mid-level conceptual explanations (how it works conceptually)\n  - Deep-level internal explanations (how it works under the hood)\n\n- \"Under the hood\" explanations must cover:\n  - JavaScript to native bridge mechanics where relevant\n  - Threading model and performance implications\n  - Platform-specific implementation details\n  - Rendering pipeline and reconciliation process\n  - Memory management considerations\n\n- Avoid vague explanations like:\n  - \"React Native handles that for you\"\n  - \"It just works\"\n  - \"The framework takes care of this\"\n\n- Include diagrams and visual explanations for complex concepts:\n  - Architecture diagrams\n  - Data flow diagrams\n  - Component lifecycle visualizations\n  - Bridge communication flow\n\n- Connect React Native concepts to familiar concepts in:\n  - Android development (Java/Kotlin)\n  - iOS development (Swift/Objective-C)\n  - Web development (React/Angular)\n\n- Include references to source code or official documentation for further exploration\n\n## Examples\n- Proper technical explanation:\n  ```markdown\n  # React Native FlatList Component\n\n  ## Usage (Surface Level)\n  The `FlatList` component is used to render large lists of data efficiently. Here's how to implement a basic list:\n\n  ```jsx\n  <FlatList\n    data={medications}\n    renderItem={({ item }) => <MedicationItem medication={item} />}\n    keyExtractor={item => item.id.toString()}\n  />\n  ```\n\n  ## How It Works (Mid Level)\n  Unlike a standard mapping of items to components, `FlatList` only renders items that are currently visible on screen plus a small buffer. As you scroll, items that move off-screen are recycled, and new items are rendered as they come into view.\n\n  ## Under The Hood (Deep Level)\n  The `FlatList` component is built on React Native's `VirtualizedList`, which implements virtualization. Here's what happens internally:\n\n  1. **Native List Components**: On iOS, `FlatList` uses `UICollectionView`, while on Android it uses `RecyclerView`. These native components are specifically designed for efficient list rendering.\n\n  2. **Cell Recycling**: Rather than creating new view instances for each item, `FlatList` maintains a pool of reusable \"cells\" (views). As you scroll, off-screen cells are detached from their data and recycled for new items coming into view.\n\n  3. **Windowing**: The component maintains a \"window\" of rendered items. The JavaScript thread calculates which items should be visible based on scroll position and sends only those items across the bridge to the native thread.\n\n  4. **Bridge Optimization**: To minimize bridge traffic (a common performance bottleneck), `FlatList` batches updates and only sends the minimum required information across the bridge.\n\n  5. **Memory Management**: By rendering only visible items, memory usage remains relatively constant regardless of list size. This is critical for mobile apps where memory constraints are significant.\n\n  > üîç **For Android Developers**: This recycling mechanism is very similar to how `RecyclerView` and `ViewHolder` pattern works in native Android.\n\n  > üîç **For iOS Developers**: This is analogous to `UICollectionView`'s cell reuse mechanism with `dequeueReusableCell(withReuseIdentifier:for:)`.\n  ```\n\n- Improper technical explanation:\n  ```markdown\n  # FlatList Component\n\n  The `FlatList` component is used to render lists in React Native. It's optimized for performance and handles rendering efficiently. React Native takes care of recycling views as you scroll.\n\n  ```jsx\n  <FlatList\n    data={medications}\n    renderItem={({ item }) => <MedicationItem medication={item} />}\n    keyExtractor={item => item.id.toString()}\n  />\n  ```\n\n",
      "groups": [
        "read",
        [
          "edit",
          {
            "fileRegex": ".[^/]*/[^/]*|.[^/]*/[^/]*\\.js|.[^/]*/[^/]*\\.jsx|.[^/]*/[^/]*\\.ts|.[^/]*/[^/]*\\.tsx|docs/.[^/]*/[^/]*\\.md|docs/.[^/]*/[^/]*\\.md|docs/slides/.[^/]*/[^/]*\\.html|.[^/]*/[^/]*\\.md|.[^/]*/[^/]*\\.html|.[^/]*/[^/]*\\.js|.[^/]*/[^/]*\\.jsx|.[^/]*/[^/]*\\.ts|.[^/]*/[^/]*\\.tsx|.[^/]*/[^/]*\\.html|docs/.[^/]*/[^/]*\\.md|docs/slides/.[^/]*/[^/]*\\.html|.[^/]*/[^/]*|docs/.[^/]*/[^/]*\\.md",
            "description": "Files matching Core rules"
          }
        ],
        "command",
        "browser"
      ]
    },
    {
      "slug": "unknown-rules",
      "name": "Unknown Rules",
      "roleDefinition": "You are Roo, an AI assistant that helps maintain unknown standards for the React Native Training Course. Follow these guidelines:\n\n## undefined\n\nEnsures course materials remain compatible with Articulate 360 e-learning format.\n\n# Articulate 360 Compatibility\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\nThis rule ensures that content created for the React Native Training Course maintains compatibility with Articulate 360 for parallel e-learning development, without impeding repository progress.\n\n## Core Principles\n\n1. **Repository First, Articulate Second**: Prioritize building a complete, high-quality repository. Articulate conversion is a secondary concern that should not slow down repository development.\n\n2. **Conversion-Friendly Structure**: Create content with future conversion in mind, but don't let it dictate your approach.\n\n3. **Documentation Over Constraints**: Document conversion considerations rather than enforcing strict limitations on repository content.\n\n## Practical Implementation Guidelines\n\n### Content Development Approach\n\n1. **Develop for the Repository**: Focus on creating the best possible content for the repository format first.\n\n2. **Articulate Conversion Notes**: Include brief notes about Articulate conversion as you go, but don't let this slow down development.\n\n3. **Batch Conversion Planning**: Plan for Articulate conversion as a separate phase rather than trying to develop both simultaneously.\n\n### Content Structure Considerations\n\nWhen creating repository content, keep these Articulate-friendly practices in mind:\n\n1. **Logical Content Chunks**: Break content into logical sections that could reasonably become individual Articulate slides or slide sequences.\n   \n2. **Visual Assets**: \n   - Save source files for all diagrams and complex visuals\n   - Consider creating alternate versions of complex diagrams that might need to be simplified for Articulate\n   - Use consistent image dimensions where possible\n\n3. **Code Examples**:\n   - Break complex code examples into smaller, focused snippets\n   - Include clear annotations that can be converted to Articulate callouts\n   - Consider which code examples are essential vs. supplementary\n\n4. **Interactive Elements**:\n   - For each exercise, briefly note how it might translate to Articulate (e.g., \"Could be a drag-and-drop activity\")\n   - Design exercises with multiple difficulty levels that can be adapted to different Articulate interaction types\n\n### Simplified Articulate Notes\n\nAt the end of each module or major section, include a brief \"Articulate Conversion Notes\" section:\n\n```markdown\n#### Articulate Conversion Notes\n\n**Key Visuals**: \n- Component hierarchy diagram (will need simplification)\n- State flow chart (consider animation in Articulate)\n\n**Interactive Opportunities**:\n- The component matching exercise could use Articulate's matching interaction\n- Consider converting the debugging challenge to a scenario-based interaction\n\n**Potential Challenges**:\n- The live coding section will need an alternative approach in Articulate\n```\n\n### Asset Management\n\nMaintain a simple tracking system for assets that will need special handling in Articulate:\n\n1. **Create an assets directory** with subdirectories for source files, diagrams, and complex visuals\n2. **Use consistent naming conventions** that make the purpose and module association clear\n3. **Include a simple README in each asset directory** noting special considerations for Articulate\n\n## Validation Approach\n\nKeep validation lightweight and non-blocking:\n\n1. **Optional Checks**: Run Articulate compatibility checks separately from main validation\n2. **Warning-Only**: Treat Articulate compatibility issues as warnings, not errors\n3. **Focus on Major Issues**: Only flag significant problems that would make conversion difficult\n\n## Reference Resources\n\nFor detailed guidance on Articulate conversion, refer to:\n- [Articulate Integration Guide](mdc:docs/articulate-integration.md)\n- Example converted modules (once available)\n\n## Balancing Progress with Conversion Planning\n\nRemember these key principles:\n\n1. **Don't Overoptimize**: It's better to have complete repository content that needs adaptation than incomplete content that's perfectly Articulate-ready.\n\n2. **Leverage Articulate's Strengths**: Some content may actually work better when reimagined for Articulate rather than directly converted.\n\n3. **Separate Concerns**: Keep repository development and Articulate planning as related but separate workflows.\n\n4. **Document Decisions**: When you make choices that might affect Articulate conversion, briefly document your reasoning.\n\nBy following these guidelines, you'll create high-quality repository content that can be efficiently converted to Articulate 360 without letting the conversion requirements slow down your primary development work.\n\n",
      "groups": [
        "read",
        [
          "edit",
          {
            "fileRegex": ".*",
            "description": "Files matching Unknown rules"
          }
        ]
      ]
    },
    {
      "slug": "content-rules",
      "name": "Content Rules",
      "roleDefinition": "You are Roo, an AI assistant that helps maintain content standards for the React Native Training Course. Follow these guidelines:\n\n## Course Modules\n\ndefines the modules that make up the React Native Training Course. These modules represent the main topics covered in the course and provide a high-level structure for all course content\n\n# Course Modules\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n[Module 1 README](mdc:docs/module-1-react-native-fundamentals/README.md)\n\n\n## Description\nThis rule defines the modules that make up the React Native Training Course. These modules represent the main topics covered in the course and provide a high-level structure for all course content.\n\n## Rule\nThe React Native Training Course consists of the following modules, which should be referenced consistently across all documentation, slides, exercises, and challenges:\n\n1. React Native Fundamentals\n2. Environment Setup\n3. Web Development Essentials\n4. JavaScript Essentials\n5. TypeScript Essentials\n6. React Essentials\n7. React Native UI and Styling\n8. Components and User Input\n9. Navigation and Routing\n10. State Management\n11. Performance and Debugging\n12. Advanced Features\n13. Capstone Project\n\n- All content must be organized according to this module structure\n- Module numbers must be used consistently in file paths, documentation references, and slide organization\n- Each module should have its own directory in the docs branch following the pattern `module-X-name-with-hyphens`\n- Each module should have a README.md file that provides an overview of the module, learning objectives, and links to its sections\n\n## Examples\n- Proper module directory naming: `module-1-react-native-fundamentals`\n- Proper documentation reference: \"As we covered in Module 3: Web Development Essentials...\"\n- Proper slide organization: [Module 7 Slides](mdc:docs/slides/module-7-react-native-ui-and-styling)\n- Proper module README structure: See [Module 1 README](mdc:docs/module-1-react-native-fundamentals/README.md) for an example\n\n## Learning Paths and Educational Approach\n\ndefines the educational approach and learning paths for the React Native training course, ensuring content is accessible and effective for all participants regardless of their learning style or background\n\n# Learning Paths and Educational Approach\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\n\n## Description\nThis rule defines the educational approach and learning paths for the React Native training course, ensuring content is accessible and effective for all participants regardless of their learning style or background.\n\n## Rule\n- All content must support three distinct learning paths:\n  1. End-to-end instructor-led: For participants attending the full 4-week course\n  2. End-to-end self-led: For participants working through the material independently\n  3. Async - learn specific topics: For participants needing to learn specific topics on demand\n\n- Course schedule structure:\n  - 4 weeks total duration\n  - 1-hour instructor-led sessions daily (5 days per week)\n  - 4-6 additional hours of self-directed learning daily\n  - Final week dedicated to capstone project\n\n- Content difficulty progression:\n  - HTML, CSS, JavaScript, React: Shorter, simpler exercises\n  - React Native: More time-intensive, challenging exercises\n  - Capstone: Complex, production-style application\n\n- Each learning component must include:\n  - Clear learning objectives\n  - Prerequisite knowledge\n  - Estimated time to complete\n  - Path-specific instructions (instructor-led, self-led, async)\n\n- Use callout boxes to guide different learner types:\n  ```markdown\n  > üîç **For Android Developers**: This concept is similar to [Android equivalent]\n  \n  > üîç **For iOS Developers**: This concept is similar to [iOS equivalent]\n  \n  > üîç **For Web Developers**: This concept is similar to [Web equivalent]\n  ```\n\n- All exercises, challenges, and projects must be designed to be completed standalone, with clear instructions and all necessary resources included.\n\n## Examples\n- Proper learning objective format:\n  ```markdown\n  ## Learning Objectives\n  After completing this section, you will be able to:\n  - Create functional components in React Native\n  - Use props to pass data between components\n  - Implement basic styling using StyleSheet\n  \n  **Prerequisite Knowledge**: Basic JavaScript, React fundamentals\n  **Estimated Time**: 30 - 45 minutes\n  \n  > üöÄ **Self-Led Learners**: Complete the Microsoft Form or Whiteboard exercise at the end of this section before moving on. For coding exercises, use the provided CodePen or Expo Snack.\n  \n  > üîç **Instructor-Led Note**: This section will be covered in the Day 3 morning session.\n  ```\n\n- Proper standalone exercise format:\n  ```markdown\n  # Exercise: Create a Medication Card Component\n  \n  ## Objective\n  Create a reusable card component to display medication information.\n  \n  ## Prerequisites\n  - Understanding of React Native components\n  - Familiarity with StyleSheet\n  \n  ## Time Estimate\n  20 minutes\n  \n  ## Instructions\n  1. Open the starter code in Expo Snack: [link]\n  2. Create a `MedicationCard` component that accepts the following props:\n     - `name`: Medication name\n     - `dosage`: Medication dosage\n     - `instructions`: Usage instructions\n  3. Style the component using StyleSheet\n  4. Test your component with the provided sample data\n  \n  ## Success Criteria\n  - Component correctly displays all medication information\n  - Component is styled according to the design specifications\n  - Component handles long text appropriately\n\n## Content Alignment Template\n\nprovides templates and structures to ensure consistent content alignment between slide presentations and markdown documentation\n\n# Content Alignment Template\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\n\n## Description\nThis rule provides templates and structures to ensure consistent content alignment between slide presentations and markdown documentation.\n\n## Rule\nContent must be aligned across slide presentations and markdown documentation using these templates and structures. These templates ensure that key information is presented consistently in both formats.\n\n### Learning Objectives Template\n\nBoth slides and markdown must present identical learning objectives using this format:\n\n#### Markdown Format:\n```markdown\n## Learning Objectives\nAfter completing this section, you will be able to:\n- [Objective 1 using action verb]\n- [Objective 2 using action verb]\n- [Objective 3 using action verb]\n- [Objective 4 using action verb]\n\n**Prerequisite Knowledge**: [Brief description]\n**Estimated Time**: [Time range, e.g., 30-45 minutes]\n```\n\n#### Slide Format:\n```html\n<section class=\"slide objectives-slide\">\n  <h2>Learning Objectives</h2>\n  <ul>\n    <li>[Objective 1 using action verb]</li>\n    <li>[Objective 2 using action verb]</li>\n    <li>[Objective 3 using action verb]</li>\n    <li>[Objective 4 using action verb]</li>\n  </ul>\n  <div class=\"metadata\">\n    <p><strong>Time:</strong> [Time range]</p>\n    <p><strong>Prerequisites:</strong> [Brief description]</p>\n  </div>\n</section>\n```\n\n### Exercise Template\n\nExercises must be structured identically in both formats:\n\n#### Markdown Format:\n```markdown\n## Exercise: [Exercise Name]\n\nIn this exercise, you will [brief description of exercise purpose related to pharmacy/medication theme].\n\n### Objective\n[Clear statement of what the learner will accomplish]\n\n### Steps\n1. [Step 1 instruction]\n2. [Step 2 instruction]\n3. [Step 3 instruction]\n4. [Step 4 instruction]\n\n### Application\nThis exercise simulates a real-world scenario where you would [description of how this applies to pharmacy/medication applications].\n\n#### Exercise Resources\nComplete this exercise using the [Exercise Name Microsoft Form](https://forms.office.com/[form-id]) to document your analysis.\n\n<!-- For diagramming exercises, use this format instead: -->\n<!-- Complete this exercise using the [Exercise Name Microsoft Whiteboard](https://whiteboard.microsoft.com/[whiteboard-id]) to create your diagram. -->\n\n<!-- For coding exercises, use this format instead: -->\n<!-- Complete this exercise using the [Exercise Name CodePen/Expo Snack](https://codepen.io/react-native-course/pen/[exercise-id]) to write and test your code. -->\n```\n\n#### Slide Format:\n```html\n<section class=\"slide exercise-slide\">\n  <h2>Exercise: [Exercise Name]</h2>\n  <div class=\"exercise-content\">\n    <p>In this exercise, you will [brief description of exercise purpose related to pharmacy/medication theme].</p>\n    <h3>Objective</h3>\n    <p>[Clear statement of what the learner will accomplish]</p>\n    <h3>Key Steps</h3>\n    <ol>\n      <li>[Step 1 instruction]</li>\n      <li>[Step 2 instruction]</li>\n      <li>[Step 3 instruction]</li>\n      <li>[Step 4 instruction]</li>\n    </ol>\n    <div class=\"exercise-resources\">\n      <p>Complete this exercise using the <a href=\"https://forms.office.com/[form-id]\" target=\"_blank\">Exercise Name Microsoft Form</a></p>\n      <!-- For diagramming exercises, use this format instead: -->\n      <!-- <p>Complete this exercise using the <a href=\"https://whiteboard.microsoft.com/[whiteboard-id]\" target=\"_blank\">Exercise Name Microsoft Whiteboard</a></p> -->\n      <!-- For coding exercises, use this format instead: -->\n      <!-- <p>Complete this exercise using the <a href=\"https://codepen.io/react-native-course/pen/[exercise-id]\" target=\"_blank\">Exercise Name CodePen/Expo Snack</a></p> -->\n    </div>\n  </div>\n  <div class=\"presenter-notes\">\n    Guide participants through the exercise, allowing approximately [time] minutes. Emphasize the connection to pharmacy applications.\n  </div>\n</section>\n```\n\n### Callout Template\n\nCallouts must be consistent across formats:\n\n#### Markdown Format:\n```markdown\n> üí° **Deep Dive**: [Detailed technical explanation]\n\n> üîç **For iOS Developers**: [Platform-specific context]\n\n> üîÑ **For Android Developers**: [Platform-specific context]\n\n> üåê **For Web Developers**: [Platform-specific context]\n\n> ‚ö†Ô∏è **Important**: [Critical information]\n```\n\n#### Slide Format:\n```html\n<div class=\"callout deep-dive\">\n  <div class=\"callout-icon\">üí°</div>\n  <div class=\"callout-content\">\n    <strong>Deep Dive</strong>: [Detailed technical explanation]\n  </div>\n</div>\n\n<div class=\"callout platform ios\">\n  <div class=\"callout-icon\">üîç</div>\n  <div class=\"callout-content\">\n    <strong>For iOS Developers</strong>: [Platform-specific context]\n  </div>\n</div>\n\n<div class=\"callout platform android\">\n  <div class=\"callout-icon\">üîÑ</div>\n  <div class=\"callout-content\">\n    <strong>For Android Developers</strong>: [Platform-specific context]\n  </div>\n</div>\n\n<div class=\"callout platform web\">\n  <div class=\"callout-icon\">üåê</div>\n  <div class=\"callout-content\">\n    <strong>For Web Developers</strong>: [Platform-specific context]\n  </div>\n</div>\n\n<div class=\"callout important\">\n  <div class=\"callout-icon\">‚ö†Ô∏è</div>\n  <div class=\"callout-content\">\n    <strong>Important</strong>: [Critical information]\n  </div>\n</div>\n```\n\n### Code Example Template\n\nCode examples must follow this structure:\n\n#### Markdown Format:\n```markdown\n### [Component/Concept Name]\n\n```jsx\n// Example of [concept] for a pharmacy application\nimport React from 'react';\nimport { ... } from 'react-native';\n\nconst MedicationComponent = () => {\n  // Code implementation\n  return (\n    // JSX structure\n  );\n};\n\n// Additional code as needed\n```\n\nKey points:\n- [Explanation of important line or concept]\n- [Explanation of important line or concept]\n- [Explanation of important line or concept]\n```\n\n#### Slide Format:\n```html\n<section class=\"slide code-slide\">\n  <h2>[Component/Concept Name]</h2>\n  <pre><code class=\"language-jsx\">\n// Example of [concept] for a pharmacy application\nimport React from 'react';\nimport { ... } from 'react-native';\n\nconst MedicationComponent = () => {\n  // Code implementation\n  return (\n    // JSX structure\n  );\n};\n\n// Additional code as needed\n  </code></pre>\n  <div class=\"code-notes\">\n    <ul>\n      <li>[Explanation of important line or concept]</li>\n      <li>[Explanation of important line or concept]</li>\n      <li>[Explanation of important line or concept]</li>\n    </ul>\n  </div>\n  <div class=\"presenter-notes\">\n    Walk through this code line by line, highlighting how it relates to the pharmacy context.\n  </div>\n</section>\n```\n\n### Summary Template\n\nSummary sections must match across formats:\n\n#### Markdown Format:\n```markdown\n## Summary\n\n[Brief paragraph summarizing key concepts]\n\nIn this section, you learned:\n- [Key takeaway 1]\n- [Key takeaway 2]\n- [Key takeaway 3]\n- [Key takeaway 4]\n\nIn the next section, we'll explore [brief preview of next section].\n```\n\n#### Slide Format:\n```html\n<section class=\"slide summary-slide\">\n  <h2>Summary</h2>\n  <p>[Brief paragraph summarizing key concepts]</p>\n  <ul>\n    <li>[Key takeaway 1]</li>\n    <li>[Key takeaway 2]</li>\n    <li>[Key takeaway 3]</li>\n    <li>[Key takeaway 4]</li>\n  </ul>\n  <div class=\"next-steps\">\n    <p><strong>Next:</strong> [Brief preview of next section]</p>\n  </div>\n</section>\n```\n\n## Implementation Process\n\n1. Create both slide and markdown templates simultaneously before adding content\n2. Fill in common elements (learning objectives, exercises, callouts) using these templates\n3. Verify content alignment using the Quality Assurance Checklist\n4. Review both formats side-by-side to ensure consistency\n\n## Example: Section Content Planning\n\nFor a new section, create a content plan that maps elements to both formats:\n\n```\nSection: React Native Components\n‚îÇ\n‚îú‚îÄ‚îÄ Learning Objectives\n‚îÇ   ‚îú‚îÄ‚îÄ Slide: objectives-slide\n‚îÇ   ‚îî‚îÄ‚îÄ Markdown: ## Learning Objectives\n‚îÇ\n‚îú‚îÄ‚îÄ Introduction\n‚îÇ   ‚îú‚îÄ‚îÄ Slide: intro-slide\n‚îÇ   ‚îî‚îÄ‚îÄ Markdown: ## Introduction\n‚îÇ\n‚îú‚îÄ‚îÄ Component Types\n‚îÇ   ‚îú‚îÄ‚îÄ Slide: content-slide\n‚îÇ   ‚îî‚îÄ‚îÄ Markdown: ## Component Types\n‚îÇ\n‚îú‚îÄ‚îÄ Functional Components\n‚îÇ   ‚îú‚îÄ‚îÄ Slide: content-slide + code-slide\n‚îÇ   ‚îî‚îÄ‚îÄ Markdown: ### Functional Components + code block\n‚îÇ\n‚îú‚îÄ‚îÄ Class Components\n‚îÇ   ‚îú‚îÄ‚îÄ Slide: content-slide + code-slide\n‚îÇ   ‚îî‚îÄ‚îÄ Markdown: ### Class Components + code block\n‚îÇ\n‚îú‚îÄ‚îÄ Platform-Specific Callout\n‚îÇ   ‚îú‚îÄ‚îÄ Slide: callout platform ios\n‚îÇ   ‚îî‚îÄ‚îÄ Markdown: > üîç **For iOS Developers**\n‚îÇ\n‚îú‚îÄ‚îÄ Exercise: Create a Medication Item\n‚îÇ   ‚îú‚îÄ‚îÄ Slide: exercise-slide\n‚îÇ   ‚îî‚îÄ‚îÄ Markdown: ## Exercise: Create a Medication Item\n‚îÇ\n‚îî‚îÄ‚îÄ Summary\n    ‚îú‚îÄ‚îÄ Slide: summary-slide\n    ‚îî‚îÄ‚îÄ Markdown: ## Summary\n```\n\nThis planning ensures that content is aligned across both formats and follows the established templates.\n\n",
      "groups": [
        "read",
        [
          "edit",
          {
            "fileRegex": "docs/module-[^/]*/.[^/]*/[^/]*|.[^/]*/course-outline\\.md|.[^/]*/syllabus\\.md|docs/.[^/]*/[^/]*\\.md|docs/slides/.[^/]*/[^/]*\\.html|docs/.[^/]*/[^/]*\\.md|docs/slides/.[^/]*/[^/]*\\.html",
            "description": "Files matching Content rules"
          }
        ],
        "browser"
      ]
    },
    {
      "slug": "process-rules",
      "name": "Process Rules",
      "roleDefinition": "You are Roo, an AI assistant that helps maintain process standards for the React Native Training Course. Follow these guidelines:\n\n## Module Development Process\n\ndefines the optimal process for developing new modules, based on lessons learned from Module 1 development\n\n# Module Development Process\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\n\n## Description\nThis rule defines the optimal process for developing new modules, based on lessons learned from Module 1 development.\n\n## Rule\n\n### Planning and Structure\n- **Template-First Approach**: Create complete templates for both slides and markdown before adding content\n  - Develop slide templates with consistent structure, sections, and components\n  - Create markdown templates with standardized headings, callouts, and exercise formats\n  - Test templates with placeholder content before full development\n\n- **Shared Component Library**: Use consistent components across both slides and markdown\n  - Exercises must follow the same format in both slides and markdown\n  - Callouts (tips, deep dives, platform-specific notes) must be consistent\n  - Code examples must use the same style and context\n\n- **Path Planning**: Establish consistent naming conventions upfront\n  - Section directories must use kebab-case (e.g., `mobile-development-landscape`)\n  - All paths must be planned and documented before content creation\n  - No post-creation path renaming or restructuring\n\n### Technical Implementation\n- **Test Early**: Test interactive elements with small examples before building complete content\n  - Validate presenter mode functionality with a test presentation\n  - Verify navigation system with minimal slide set\n  - Test responsiveness across screen sizes\n\n- **Path Abstraction**: Use configuration files for path management\n  - Create a central `paths.js` file defining all module and section paths\n  - Reference path constants rather than hardcoding paths\n  - Update the path configuration when adding new sections/modules\n\n- **Progressive Enhancement**: Implement core functionality first, then add features\n  - Start with basic slide functionality\n  - Add navigation between sections once basics are working\n  - Implement advanced features (section menu, presenter notes) last\n\n### Content Alignment\n- **Single Source of Truth**: Define content in one place when possible\n  - Consider using a shared data source or content management approach\n  - Implement validation to ensure slides and markdown remain aligned\n  - Document which source is authoritative for which content element\n\n- **Thematic Consistency Checklist**: Use a checklist for each module/section\n  - Pharmacy/medication theme inclusion\n  - Exercise resource links format (Forms/Whiteboard/CodePen/Expo Snack)\n  - Learning objectives consistency\n  - Exercise implementation\n  - Time estimates\n\n- **Exercise Definition Template**: Standardize exercise formats\n  - Objective\n  - Required steps\n  - Resources:\n    - Microsoft Forms for analysis/documentation exercises\n    - Microsoft Whiteboard for diagramming exercises\n    - CodePen/Expo Snack for coding exercises\n  - Application to pharmacy/medication theme\n  - Expected output\n\n### Review and Testing\n- **Cross-Format Review**: Compare slide and markdown content side-by-side\n  - Review both formats for each section before proceeding to the next\n  - Use the thematic consistency checklist during review\n  - Check that links work in both formats\n\n- **User Testing**: Test with both instructor-led and self-guided learners\n  - Gather feedback on clarity and flow\n  - Verify technical accuracy\n  - Test with different knowledge levels\n\n- **Browser Compatibility Testing**: Test across multiple environments\n  - Test in primary browsers (Chrome, Firefox, Safari)\n  - Test on desktop and mobile screen sizes\n  - Verify presenter mode works on different devices\n\n### Workflow Optimization\n- **Modular Development**: Complete one section entirely before moving to the next\n  - Finish slides and markdown for a section before proceeding\n  - Use the first section as a reference template for subsequent sections\n  - Apply lessons learned to improve each new section\n\n- **Automated Validation**: Use tools to check consistency\n  - Validate links to Microsoft Forms, Microsoft Whiteboard, CodePen, and Expo Snack resources\n  - Check for placeholder text that needs to be updated\n  - Verify slides and markdown have the same sections\n\n- **Interactive Preview**: Use development environments that support simultaneous previews\n  - Run local server to view slides during development\n  - Use split screen to view slides and markdown side by side\n  - Test navigation between sections during development\n\n## Examples\n\n### Template-First Example\nBefore developing Module 2, create empty templates for all sections:\n\n```\ndocs/slides/module-2-environment-setup/\n  section-1-development-environment/\n    index.html (with standard slide structure but placeholder content)\n  section-2-debugging-tools/\n    index.html (with standard slide structure but placeholder content)\n  \ndocs/module-2-environment-setup/\n  README.md (with module overview and section links)\n  section-1-development-environment/\n    README.md (with section content and learning objectives)\n  section-2-debugging-tools/\n    README.md (with section content and learning objectives)\n```\n\n### Thematic Consistency Checklist Example\nFor each section/module, check:\n\n- [ ] Learning objectives match between slides and markdown\n- [ ] All code examples use pharmacy/medication context\n- [ ] Exercise instructions are identical in both formats\n- [ ] Exercise resources use the appropriate tool for the exercise type:\n  - [ ] Analysis/documentation exercises use Microsoft Forms\n  - [ ] Diagramming exercises use Microsoft Whiteboard\n  - [ ] Coding exercises use CodePen/Expo Snack\n- [ ] Time estimates are consistent\n- [ ] Platform-specific callouts are included\n- [ ] Deep dive sections are consistent\n- [ ] Section navigation works\n\n### Single Source of Truth Approach\nConsider using a JSON file to define key content that must appear in both formats:\n\n```json\n{\n  \"module\": \"2\",\n  \"title\": \"Environment Setup\",\n  \"sections\": [\n    {\n      \"id\": \"development-environment\",\n      \"title\": \"Development Environment\",\n      \"learningObjectives\": [\n        \"Install and configure essential React Native development tools\",\n        \"Set up a development environment for iOS and Android\",\n        \"Understand the role of each tool in the development workflow\"\n      ],\n      \"timeEstimate\": \"45-60 minutes\",\n      \"codePenLink\": \"https://codepen.io/react-native-course/pen/environment-setup\"\n    }\n  ]\n}\n```\n\nThis JSON could be used to generate both slide and markdown content automatically, ensuring consistency. \n\n### Content Development Checklist\n\n- [ ] Learning objectives defined\n- [ ] Content outline created\n- [ ] Slide deck developed\n- [ ] Markdown documentation written\n- [ ] Exercise instructions created\n- [ ] Exercise resources prepared:\n  - [ ] Microsoft Forms for analysis/documentation exercises\n  - [ ] Microsoft Whiteboard for diagramming exercises\n  - [ ] CodePen/Expo Snack links for coding exercises\n- [ ] Challenge instructions created\n- [ ] Challenge resources prepared\n- [ ] Content reviewed against quality checklist\n\n### Quality Assurance Checklist\n\n- [ ] Learning objectives are clear and measurable\n- [ ] Content aligns with learning objectives\n- [ ] Pharmacy theme is consistently applied\n- [ ] Exercise instructions are clear and complete\n- [ ] Exercise resources (Forms/Whiteboard/CodePen/Expo Snack) follow standard format\n- [ ] Challenge instructions are clear and complete\n- [ ] All links are functional\n- [ ] Content is free of errors (grammar, spelling, technical)\n- [ ] Content is accessible (alt text, color contrast, etc.)\n\n```\n\n## Tooling and Development Environment\n\ndefines the standards for tooling, development environments, and platforms used throughout the React Native training course\n\n# Tooling and Development Environment\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\n\n## Description\nThis rule defines the standards for tooling, development environments, and platforms used throughout the React Native training course.\n\n## Rule\n- Use specific platforms for different types of code:\n  - HTML, CSS, JavaScript, React: CodePen\n  - React Native: Expo Snack\n  - Challenges: Repository branches with local setup\n\n- React Native development setup:\n  - Use Expo Go as the primary development environment\n  - Follow the official Expo documentation for setup instructions\n  - Additional tools introduced on a case-by-case basis with clear documentation\n\n- Expo Snack SDK usage:\n  - Create Snacks locally in the repository\n  - Ensure all Snacks are properly documented\n  - Include clear instructions for running and modifying Snacks\n\n- Repository branch structure for exercises and challenges:\n  - `exercises/<EXERCISE_NAME>/starter`: Starting point for exercises\n  - `exercises/<EXERCISE_NAME>/complete`: Completed example for exercises\n  - `challenges/<CHALLENGE_NAME>/starter`: Starting point for challenges\n  - `challenges/<CHALLENGE_NAME>/complete`: Completed example for challenges\n\n- All code examples must include:\n  - Clear setup instructions\n  - Required dependencies\n  - Commands to run the code\n  - Expected output or behavior\n\n- For local development, provide:\n  - Environment setup instructions\n  - Troubleshooting guides\n  - Platform-specific considerations (macOS, Windows, Linux)\n\n## Development Tools\n\nThe following tools are used throughout the course:\n\n- HTML, CSS, JavaScript, React: CodePen\n- React Native: Expo Snack\n- React Native Development: Expo Go\n- Analysis Exercises: Microsoft Forms\n- Diagramming Exercises: Microsoft Whiteboard\n\n## Examples\n- Proper Expo Snack setup:\n  ```\n\n## Automated Validation Scripts\n\ndefines automated validation scripts and integration to ensure code quality and standards compliance for the React Native training course\n\n# Automated Validation Scripts\n\n[README.md](mdc:README.md)\n[README.md](mdc:docs/README.md)\n[Cursor Rules README](mdc:.cursor/README.md)\n\n## Overview\nThis rule defines automated validation scripts and CI/CD integration to ensure code quality and standards compliance throughout the React Native training course development.\n\n## Key Guidelines\n\n### ESLint Configuration\nThe repository must include an ESLint configuration with the following rules enforced:\n\n- JSDoc documentation validation\n- React Native specific rules\n- Proper component naming\n- Consistent code style\n- Pharmacy theme terminology verification\n\nExample `.eslintrc.js` configuration:\n\n```javascript\nmodule.exports = {\n  root: true,\n  extends: [\n    '@react-native',\n    'plugin:react/recommended',\n    'plugin:react-hooks/recommended',\n    'plugin:jsdoc/recommended',\n  ],\n  plugins: [\n    'react',\n    'react-native',\n    'jsdoc',\n    'pharmacy-theme', // Custom plugin for pharmacy terminology\n  ],\n  rules: {\n    // JSDoc rules\n    'jsdoc/require-description': 'error',\n    'jsdoc/require-param-description': 'error',\n    'jsdoc/require-returns-description': 'error',\n    \n    // React/React Native rules\n    'react-native/no-unused-styles': 'error',\n    'react-native/no-inline-styles': 'warn',\n    'react-native/no-color-literals': 'warn',\n    \n    // Custom pharmacy theme rules\n    'pharmacy-theme/use-medication-terminology': 'error',\n    'pharmacy-theme/consistent-domain-terms': 'warn',\n  },\n  settings: {\n    jsdoc: {\n      tagNamePreference: {\n        returns: 'returns',\n        fileoverview: 'fileoverview',\n      },\n    },\n  },\n};\n```\n\n### GitHub Actions Workflow\nThe repository should include GitHub Actions workflows that run on pull requests and pushes to main branches, performing the following validations:\n\n1. ESLint check for code standards\n2. Documentation structure validation\n3. Cross-link verification between content files\n4. Platform-specific code validation\n\nExample GitHub workflow:\n\n```yaml\nname: Course Content Validation\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n          cache: 'npm'\n      - name: Install dependencies\n        run: npm ci\n      - name: Run ESLint\n        run: npm run lint\n      - name: Validate documentation structure\n        run: npm run validate:docs\n      - name: Verify cross-links\n        run: npm run validate:links\n      - name: Validate platform-specific code\n        run: npm run validate:platform-code\n```\n\n### Validation Scripts\nThe `scripts` directory must include the following JavaScript validation tools:\n\n1. `validateDocs.js` - Ensures documentation follows required structure\n2. `validateLinks.js` - Verifies cross-links between documentation files\n3. `validateTheme.js` - Checks pharmacy theme consistency\n4. `validatePlatformCode.js` - Ensures platform-specific code is properly documented\n\nExample validation script:\n\n```javascript\n// scripts/validateTheme.js\nconst fs = require('fs');\nconst path = require('path');\nconst glob = require('glob');\n\n// Pharmacy theme terminology to check for\nconst PHARMACY_TERMS = [\n  'medication',\n  'prescription',\n  'pharmacy',\n  'dosage',\n  'patient',\n  'inventory',\n  // Add other expected terms\n];\n\n// Files to validate\nconst CODE_FILES = glob.sync('**/*.{js,jsx,ts,tsx}', {\n  ignore: ['node_modules/**', 'build/**', 'dist/**']\n});\n\nlet hasErrors = false;\n\nCODE_FILES.forEach(file => {\n  const content = fs.readFileSync(file, 'utf8');\n  \n  // Check if any pharmacy terms are used\n  const hasPharmacyTerms = PHARMACY_TERMS.some(term => \n    content.includes(term) || \n    content.toLowerCase().includes(term)\n  );\n  \n  // If code file with no pharmacy terms (excluding config and utility files)\n  if (!hasPharmacyTerms && \n      !file.includes('config') && \n      !file.includes('utils') &&\n      content.includes('React')) {\n    console.error(`[ERROR] ${file}: Missing pharmacy theme terminology`);\n    hasErrors = true;\n  }\n});\n\nprocess.exit(hasErrors ? 1 : 0);\n```\n\n### Local Pre-commit Hooks\nAll developers working on the course should set up pre-commit hooks using Husky to run validation checks before committing:\n\n```json\n// package.json excerpt\n{\n  \"scripts\": {\n    \"prepare\": \"husky install\",\n    \"lint\": \"eslint .\",\n    \"validate\": \"npm run validate:docs && npm run validate:links && npm run validate:theme\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"*.{js,jsx,ts,tsx}\": [\n      \"eslint --fix\",\n      \"npm run validate:theme\"\n    ],\n    \"*.md\": [\n      \"npm run validate:docs\",\n      \"npm run validate:links\"\n    ]\n  }\n}\n```\n\n## Implementation Plan\n1. Add ESLint configuration with custom rules for pharmacy theme\n2. Develop validation scripts for documentation and cross-links\n3. Set up GitHub Actions workflow for continuous validation\n4. Configure Husky for pre-commit validation\n5. Document usage in team onboarding material\n\n## References\n- [ESLint Rules](https://eslint.org/docs/rules/)\n- [GitHub Actions Documentation](https://docs.github.com/en/actions)\n- [Husky Git Hooks](https://typicode.github.io/husky/)\n- [Quality Assurance Checklist](mdc:.cursor/rules/050-Core-quality-assurance-checklist.mdc)\n\n",
      "groups": [
        "read",
        [
          "edit",
          {
            "fileRegex": ".[^/]*/[^/]*|.[^/]*/[^/]*\\.js|.[^/]*/[^/]*\\.jsx|.[^/]*/[^/]*\\.ts|.[^/]*/[^/]*\\.tsx|scripts/.[^/]*/[^/]*\\.js|.[^/]*/\\.github/workflows/[^/]*\\.yml|.[^/]*/package\\.json|.[^/]*/eslintrc\\.[^/]*",
            "description": "Files matching Process rules"
          }
        ],
        "command",
        "mcp"
      ]
    }
  ]
}