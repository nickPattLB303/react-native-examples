# React Native Training Course - Cline Rules

## Project Overview
This is a comprehensive React Native training course designed to teach developers how to build cross-platform mobile applications. The course covers fundamentals through advanced features and includes a capstone project.

## Coding Standards

### General Guidelines
- All code must follow the medication/pharmacy/orders theme
- Use consistent naming conventions (camelCase for variables and functions, PascalCase for components)
- Follow the Airbnb JavaScript Style Guide
- Include JSDoc documentation for all components and functions
- Handle platform-specific code appropriately with Platform.OS checks
- Ensure accessibility compliance in all UI components

### React Native Best Practices
- Use functional components with hooks instead of class components
- Implement proper error handling in all asynchronous operations
- Optimize performance with useMemo, useCallback, and React.memo where appropriate
- Follow the component composition pattern for reusable UI elements
- Implement responsive designs using Flexbox
- Use StyleSheet.create for styles instead of inline styles

### Documentation Requirements
- All modules and sections must have README.md files with clear learning objectives
- Code examples must include detailed comments explaining key concepts
- Follow Microsoft Writing Style Guide for all documentation
- Include surface, mid, and deep-level explanations for technical concepts
- Use consistent callout formats for tips, warnings, and platform-specific notes
- Provide visual explanations (diagrams, flowcharts) for complex concepts

## Project Structure
- Organize content by modules and sections following the established hierarchy
- Use kebab-case for directory and file names
- Follow the template-first approach for new content development
- Maintain consistency between slides and markdown documentation
- Store exercises and challenges in dedicated directories with starter and complete code

## Testing and Quality Assurance
- Verify content against the quality assurance checklist before submission
- Ensure cross-browser compatibility for all web content
- Test exercises and challenges on both iOS and Android platforms
- Validate links to external resources (Forms, Whiteboard, CodePen, Expo Snack)
- Check for consistency between slides and markdown documentation
- Verify that all code examples follow the pharmacy/medication theme

## Security Practices
- Do not include sensitive information in code examples or documentation
- Use environment variables for API keys and credentials in examples
- Follow secure coding practices in all examples
- Demonstrate proper authentication and authorization patterns
- Include security best practices in relevant sections

## Ignore Patterns
# Build outputs
dist/
build/
out/
.next/
.expo/
web-build/

# Dependencies
node_modules/
vendor/
yarn.lock
package-lock.json
pnpm-lock.yaml

# Cache and logs
.cache/
.npm/
.yarn/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
*.log
tmp/
temp/
.tmp/
.temp/

# Editor files
.idea/
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# OS files
.DS_Store
Thumbs.db
*.swp
*.swo

# Environment and secrets
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
*.pem
*.key

# Temporary files
tmp/
temp/

# Test coverage
coverage/
.nyc_output/

# Mobile specific
*.ipa
*.apk
*.aab
android/
ios/

# Generated files
*.generated.*
*.auto.*
*.g.*

# Large binary files
*.jpg
*.jpeg
*.png
*.gif
*.ico
*.svg
*.ttf
*.woff
*.woff2
*.eot
*.mp3
*.mp4
*.mov
*.avi
*.zip
*.tar.gz
*.tgz
*.rar
*.7z

# Git and CI/CD
.git/
.github/
.gitlab/
.circleci/

# Config files
*.config.js
*.conf.js
babel.config.js
metro.config.js
jest.config.js
tsconfig.json
.prettierrc
.eslintrc*
.babelrc*

# Allow all documentation and training material
!docs/**/*.md
!docs/**/*.html