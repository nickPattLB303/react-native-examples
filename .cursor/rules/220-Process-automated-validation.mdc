---
name: "Automated Validation Scripts"
version: "1.0"
description: "defines automated validation scripts and integration to ensure code quality and standards compliance for the React Native training course"
priority: "medium"
type: "Process"
globs: 
  - "scripts/**/*.js"
  - "**/.github/workflows/*.yml"
  - "**/package.json"
  - "**/eslintrc.*"
triggers:
  - file_change
  - file_open
alwaysApply: false
---

# Automated Validation Scripts

[README.md](mdc:README.md)
[README.md](mdc:docs/README.md)
[Cursor Rules README](mdc:.cursor/README.md)

## Overview
This rule defines automated validation scripts and CI/CD integration to ensure code quality and standards compliance throughout the React Native training course development.

## Key Guidelines

### ESLint Configuration
The repository must include an ESLint configuration with the following rules enforced:

- JSDoc documentation validation
- React Native specific rules
- Proper component naming
- Consistent code style
- Pharmacy theme terminology verification

Example `.eslintrc.js` configuration:

```javascript
module.exports = {
  root: true,
  extends: [
    '@react-native',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
    'plugin:jsdoc/recommended',
  ],
  plugins: [
    'react',
    'react-native',
    'jsdoc',
    'pharmacy-theme', // Custom plugin for pharmacy terminology
  ],
  rules: {
    // JSDoc rules
    'jsdoc/require-description': 'error',
    'jsdoc/require-param-description': 'error',
    'jsdoc/require-returns-description': 'error',
    
    // React/React Native rules
    'react-native/no-unused-styles': 'error',
    'react-native/no-inline-styles': 'warn',
    'react-native/no-color-literals': 'warn',
    
    // Custom pharmacy theme rules
    'pharmacy-theme/use-medication-terminology': 'error',
    'pharmacy-theme/consistent-domain-terms': 'warn',
  },
  settings: {
    jsdoc: {
      tagNamePreference: {
        returns: 'returns',
        fileoverview: 'fileoverview',
      },
    },
  },
};
```

### GitHub Actions Workflow
The repository should include GitHub Actions workflows that run on pull requests and pushes to main branches, performing the following validations:

1. ESLint check for code standards
2. Documentation structure validation
3. Cross-link verification between content files
4. Platform-specific code validation

Example GitHub workflow:

```yaml
name: Course Content Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Validate documentation structure
        run: npm run validate:docs
      - name: Verify cross-links
        run: npm run validate:links
      - name: Validate platform-specific code
        run: npm run validate:platform-code
```

### Validation Scripts
The `scripts` directory must include the following JavaScript validation tools:

1. `validateDocs.js` - Ensures documentation follows required structure
2. `validateLinks.js` - Verifies cross-links between documentation files
3. `validateTheme.js` - Checks pharmacy theme consistency
4. `validatePlatformCode.js` - Ensures platform-specific code is properly documented

Example validation script:

```javascript
// scripts/validateTheme.js
const fs = require('fs');
const path = require('path');
const glob = require('glob');

// Pharmacy theme terminology to check for
const PHARMACY_TERMS = [
  'medication',
  'prescription',
  'pharmacy',
  'dosage',
  'patient',
  'inventory',
  // Add other expected terms
];

// Files to validate
const CODE_FILES = glob.sync('**/*.{js,jsx,ts,tsx}', {
  ignore: ['node_modules/**', 'build/**', 'dist/**']
});

let hasErrors = false;

CODE_FILES.forEach(file => {
  const content = fs.readFileSync(file, 'utf8');
  
  // Check if any pharmacy terms are used
  const hasPharmacyTerms = PHARMACY_TERMS.some(term => 
    content.includes(term) || 
    content.toLowerCase().includes(term)
  );
  
  // If code file with no pharmacy terms (excluding config and utility files)
  if (!hasPharmacyTerms && 
      !file.includes('config') && 
      !file.includes('utils') &&
      content.includes('React')) {
    console.error(`[ERROR] ${file}: Missing pharmacy theme terminology`);
    hasErrors = true;
  }
});

process.exit(hasErrors ? 1 : 0);
```

### Local Pre-commit Hooks
All developers working on the course should set up pre-commit hooks using Husky to run validation checks before committing:

```json
// package.json excerpt
{
  "scripts": {
    "prepare": "husky install",
    "lint": "eslint .",
    "validate": "npm run validate:docs && npm run validate:links && npm run validate:theme"
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "eslint --fix",
      "npm run validate:theme"
    ],
    "*.md": [
      "npm run validate:docs",
      "npm run validate:links"
    ]
  }
}
```

## Implementation Plan
1. Add ESLint configuration with custom rules for pharmacy theme
2. Develop validation scripts for documentation and cross-links
3. Set up GitHub Actions workflow for continuous validation
4. Configure Husky for pre-commit validation
5. Document usage in team onboarding material

## References
- [ESLint Rules](https://eslint.org/docs/rules/)
- [GitHub Actions Documentation](https://docs.github.com/en/actions)
- [Husky Git Hooks](https://typicode.github.io/husky/)
- [Quality Assurance Checklist](mdc:.cursor/rules/050-Core-quality-assurance-checklist.mdc) 