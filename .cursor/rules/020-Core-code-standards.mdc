---
name: "Code Standards and Examples"
version: "1.0"
description: "defines the standards for all code examples, exercises, challenges, and projects in the React Native training course"
priority: "high"
type: "Core"
globs: 
  - "**/*.js"
  - "**/*.jsx"
  - "**/*.ts"
  - "**/*.tsx"
  - "**/*.html"
triggers:
  - file_change
  - file_open
alwaysApply: true
---

# Code Standards and Examples

[README.md](mdc:README.md)
[README.md](mdc:docs/README.md)
[Cursor Rules README](mdc:.cursor/README.md)


## Description
This rule defines the standards for all code examples, exercises, challenges, and projects in the React Native training course.

## Rule
- All code must follow the medication/pharmacy/orders theme:
  - Use relevant variable names (e.g., `medication`, `prescription`, `pharmacy`)
  - Create examples that model real-world pharmacy scenarios
  - Use consistent domain terminology throughout

- All code must include comprehensive JSDoc documentation:
  - File headers with description, author, and date
  - Function documentation with parameters, return values, and examples
  - Class documentation with description and usage examples
  - Component documentation with props and state descriptions

- Platform-specific code must be clearly marked and explained:
  ```javascript
  // iOS-specific implementation
  if (Platform.OS === 'ios') {
    // Implementation with explanation of iOS-specific behavior
  }
  // Android-specific implementation
  else if (Platform.OS === 'android') {
    // Implementation with explanation of Android-specific behavior
  }
  ```

- Exercise and challenge structure:
  - Exercises (15-30 minutes): End of each section
  - Challenges (30-60 minutes): End of each module
  - Capstone project: Final week of training

- Code platform usage:
  - HTML, CSS, JavaScript, React: CodePen
  - React Native: Expo Snack
  - Analysis Exercises: Microsoft Forms
  - Diagramming Exercises: Microsoft Whiteboard
  - Challenges: Pre-made branches in the repository

- React Native setup:
  - Use Expo Go setup as described in Expo documentation
  - Additional tools introduced on a case-by-case basis

- React Native advocacy in code examples:
  - Include comparative code snippets showing native vs. React Native implementations
  - Highlight code reduction and simplification benefits
  - Include comments about cross-platform benefits
  - Add performance considerations and optimizations
  - Demonstrate developer experience advantages

- Code examples must follow the advocacy pattern system:
  - Comparative Demonstrations: Show equivalent native code alongside React Native
  - Developer Experience Highlights: Include metrics on development time savings
  - Technical Advantages: Highlight specific React Native benefits in comments
  - Ecosystem Integration: Show integration with relevant libraries
  - Performance Optimization: Include performance best practices

## Examples
- Proper JSDoc documentation:
  ```javascript
  /**
   * @fileoverview Component for displaying a list of medications
   * @author Training Course Author
   * @created 2023-05-01
   */

  /**
   * Calculates the dosage based on patient weight and medication concentration
   * @param {number} weight - Patient weight in kg
   * @param {number} concentration - Medication concentration in mg/ml
   * @returns {number} The calculated dosage in ml
   * @example
   * // Returns 2.5
   * calculateDosage(50, 20)
   */
  function calculateDosage(weight, concentration) {
    return weight * 0.001 * concentration;
  }
  ```

- Improper JSDoc documentation:
  ```javascript
  // Function to calculate dosage
  function calculateDosage(weight, concentration) {
    return weight * 0.001 * concentration;
  }
  ```

- Proper themed example:
  ```javascript
  const medications = [
    { id: 1, name: 'Amoxicillin', dosage: '500mg', frequency: '3x daily' },
    { id: 2, name: 'Lisinopril', dosage: '10mg', frequency: '1x daily' },
    { id: 3, name: 'Metformin', dosage: '1000mg', frequency: '2x daily' }
  ];

  function MedicationList({ medications }) {
    return (
      <FlatList
        data={medications}
        keyExtractor={(item) => item.id.toString()}
        renderItem={({ item }) => (
          <MedicationItem 
            name={item.name}
            dosage={item.dosage}
            frequency={item.frequency}
          />
        )}
      />
    );
  }
  ```

- Proper React Native advocacy code example:
  ```javascript
  /**
   * @fileoverview Medication search component with platform-specific optimizations
   * @author Training Course Author
   * @created 2023-05-10
   * 
   * @react-native-advantage Cross-platform implementation with single codebase
   * @development-time-saved Approximately 60% compared to native implementations
   * @performance Near-native performance with Hermes engine optimizations
   */

  import React, { useState, useCallback } from 'react';
  import { View, TextInput, FlatList, StyleSheet, Platform } from 'react-native';
  import { debounce } from 'lodash'; // Ecosystem integration example
  
  /**
   * MedicationSearch component for searching and displaying medications
   * 
   * NATIVE EQUIVALENT:
   * - iOS: UISearchController + UICollectionView (120+ lines)
   * - Android: SearchView + RecyclerView (100+ lines)
   * 
   * REACT NATIVE ADVANTAGE:
   * - Single implementation for both platforms (40 lines)
   * - Built-in performance optimizations
   * - Simplified state management
   * - Automatic keyboard handling
   */
  export default function MedicationSearch({ medications, onSelect }) {
    const [query, setQuery] = useState('');
    const [results, setResults] = useState(medications);
    
    // Performance optimization: Debounce search to prevent excessive renders
    const searchMedications = useCallback(
      debounce((text) => {
        const filtered = medications.filter(med => 
          med.name.toLowerCase().includes(text.toLowerCase())
        );
        setResults(filtered);
      }, 300),
      [medications]
    );
    
    const handleSearch = (text) => {
      setQuery(text);
      searchMedications(text);
    };
    
    // Platform-specific styling with explanation
    const searchBarStyle = Platform.select({
      ios: styles.iosSearchBar, // Matches iOS design guidelines
      android: styles.androidSearchBar, // Matches Material Design
      default: styles.defaultSearchBar
    });
    
    return (
      <View style={styles.container}>
        <TextInput
          style={[styles.searchInput, searchBarStyle]}
          value={query}
          onChangeText={handleSearch}
          placeholder="Search medications..."
          placeholderTextColor="#888"
          // Cross-platform keyboard optimization
          returnKeyType="search"
          clearButtonMode="while-editing"
        />
        <FlatList
          data={results}
          keyExtractor={(item) => item.id.toString()}
          renderItem={({ item }) => (
            <MedicationItem 
              medication={item}
              onPress={() => onSelect(item)}
            />
          )}
          // Performance optimizations
          removeClippedSubviews={true}
          initialNumToRender={10}
          maxToRenderPerBatch={10}
          windowSize={5}
          keyboardShouldPersistTaps="handled"
        />
      </View>
    );
  }
  
  const styles = StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#f5f5f5',
    },
    searchInput: {
      height: 50,
      margin: 10,
      padding: 10,
      backgroundColor: 'white',
      borderRadius: 5,
    },
    // Platform-specific styles following design guidelines
    iosSearchBar: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 1 },
      shadowOpacity: 0.2,
      shadowRadius: 1,
    },
    androidSearchBar: {
      elevation: 2,
    },
    defaultSearchBar: {
      borderWidth: 1,
      borderColor: '#ddd',
    },
  });
  
  /**
   * DEVELOPER EXPERIENCE WIN:
   * 
   * - Native iOS: Requires UISearchController, UICollectionView, custom cells, delegates
   * - Native Android: Requires SearchView, RecyclerView, Adapters, ViewHolders
   * - React Native: Single component with unified API and styling
   * 
   * Time saved: ~8 hours per platform
   * Code reduction: ~70%
   * Maintenance benefit: Single codebase for bug fixes and feature updates
   */
  ```

- Proper React Native component with JSDoc and platform-specific handling:
  ```javascript
  /**
   * @fileoverview Component for displaying pharmacy inventory with platform-specific UI adaptations
   * @author Training Course Author
   * @created 2023-05-05
   */

  import React, { useState, useEffect } from 'react';
  import { View, Text, FlatList, StyleSheet, Platform } from 'react-native';
  import { fetchInventory } from '../api/pharmacyService';

  /**
   * Component to display the pharmacy inventory with counts and status
   * Adapts UI based on platform-specific design guidelines
   * 
   * @param {Object} props Component properties
   * @param {string} props.pharmacyId Unique identifier for the pharmacy location
   * @param {boolean} props.showLowStock Whether to highlight items with low stock
   * @param {Function} props.onItemSelect Callback when inventory item is selected
   * @returns {React.ReactElement} Pharmacy inventory component
   */
  export default function PharmacyInventory({ pharmacyId, showLowStock, onItemSelect }) {
    const [inventory, setInventory] = useState([]);
    const [loading, setLoading] = useState(true);
    
    useEffect(() => {
      // Fetch inventory data
      fetchInventory(pharmacyId)
        .then(data => {
          setInventory(data);
          setLoading(false);
        })
        .catch(error => {
          console.error('Failed to load inventory:', error);
          setLoading(false);
        });
    }, [pharmacyId]);

    // Platform-specific rendering for medication items
    const renderMedicationItem = ({ item }) => {
      // iOS-specific implementation
      if (Platform.OS === 'ios') {
        // iOS uses SF Symbols and follows iOS design guidelines
        return (
          <View style={[styles.medicationItem, styles.iosMedicationItem]}>
            <Text style={styles.medicationName}>{item.name}</Text>
            <Text style={styles.dosageText}>{item.dosage}</Text>
            <Text style={item.count < 10 ? styles.lowStockText : styles.stockText}>
              {item.count} in stock
            </Text>
          </View>
        );
      }
      // Android-specific implementation 
      else if (Platform.OS === 'android') {
        // Android uses Material Design components and elevation
        return (
          <View style={[styles.medicationItem, styles.androidMedicationItem]}>
            <Text style={styles.medicationName}>{item.name}</Text>
            <View style={styles.detailsRow}>
              <Text style={styles.dosageText}>{item.dosage}</Text>
              <Text 
                style={[
                  styles.stockBadge,
                  item.count < 10 ? styles.lowStockBadge : styles.normalStockBadge
                ]}
              >
                {item.count}
              </Text>
            </View>
          </View>
        );
      }
      // Web or other platforms
      else {
        return (
          <View style={styles.medicationItem}>
            <Text style={styles.medicationName}>{item.name}</Text>
            <Text style={styles.dosageText}>{item.dosage}</Text>
            <Text>{item.count} in stock</Text>
          </View>
        );
      }
    };

    return (
      <View style={styles.container}>
        <Text style={styles.header}>Pharmacy Inventory</Text>
        {loading ? (
          <Text>Loading inventory...</Text>
        ) : (
          <FlatList
            data={inventory}
            keyExtractor={item => item.id.toString()}
            renderItem={renderMedicationItem}
            contentContainerStyle={styles.listContainer}
          />
        )}
      </View>
    );
  }

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#f5f5f5',
    },
    header: {
      fontSize: 24,
      fontWeight: 'bold',
      padding: 16,
      textAlign: 'center',
    },
    listContainer: {
      padding: 8,
    },
    medicationItem: {
      marginBottom: 12,
      padding: 16,
      backgroundColor: 'white',
      borderRadius: 8,
    },
    // iOS-specific styles
    iosMedicationItem: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 1 },
      shadowOpacity: 0.2,
      shadowRadius: 2,
    },
    // Android-specific styles
    androidMedicationItem: {
      elevation: 3,
    },
    medicationName: {
      fontSize: 18,
      fontWeight: 'bold',
      marginBottom: 4,
    },
    dosageText: {
      fontSize: 16,
      color: '#666',
    },
    lowStockText: {
      color: 'red',
      fontWeight: 'bold',
    },
    stockText: {
      color: 'green',
    },
    detailsRow: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      marginTop: 8,
    },
    stockBadge: {
      paddingHorizontal: 8,
      paddingVertical: 4,
      borderRadius: 12,
      color: 'white',
      fontSize: 12,
      fontWeight: 'bold',
    },
    lowStockBadge: {
      backgroundColor: '#D32F2F',
    },
    normalStockBadge: {
      backgroundColor: '#2E7D32',
    },
  });
  ``` 