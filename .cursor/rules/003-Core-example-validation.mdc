---
name: "Example Validation"
version: "1.0"
description: "Ensures code examples follow pharmacy theme and structure requirements"
priority: "medium"
type: "Core"
globs: 
  - "**/*.js"
  - "**/*.jsx"
  - "**/*.ts"
  - "**/*.tsx"
  - "docs/**/*.md"
triggers:
  - file_change
  - file_save
alwaysApply: false
---

# Example Validation

When creating or reviewing code examples in this project, ensure all examples:

## Pharmacy Terminology Standards

All examples must use the appropriate pharmacy domain terminology:

✅ **Recommended Terms**
- `medication`, `prescription`, `pharmacy`, `patient`, `dosage`, `dispense`
- `MedicationList`, `PrescriptionItem`, `PharmacyLocator`
- `onDispense`, `calculateDosage`, `refillPrescription`

❌ **Avoid Generic Terms**
- `item`, `data`, `list`, `user`, `amount`
- `ItemList`, `DataRow`, `UserProfile`
- `onSubmit`, `handleData`, `processItem`

## Component Structure Standards

React Native components should follow this structure:

```jsx
/**
 * @fileoverview Component for [purpose]
 * @author [author]
 * @created [date]
 */

import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

/**
 * @component MedicationItem
 * @description Displays a single medication with its details
 * 
 * @param {Object} props - The component props
 * @param {string} props.name - Medication name
 * @param {string} props.dosage - Prescribed dosage
 * @param {string} props.frequency - How often to take
 * @returns {JSX.Element} Rendered component
 */
const MedicationItem = ({ name, dosage, frequency }) => {
  return (
    <View style={styles.container}>
      <Text style={styles.name}>{name}</Text>
      <Text style={styles.details}>{dosage} - {frequency}</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  name: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  details: {
    fontSize: 14,
    color: '#666',
  },
});

export default MedicationItem;
```

## Example Code Requirements

All code examples must:

1. Compile without errors
2. Include appropriate imports
3. Use consistent styling
4. Follow the JSX component pattern for React Native
5. Include proper JSDoc comments
6. Be meaningful and demonstrate the concept being taught
7. Use the theme appropriately 